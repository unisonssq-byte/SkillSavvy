{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Overview\n\nThis is a modern, interactive portfolio website called \"Unicode's Portfolio\" built for a freelance programmer. The application follows a full-stack architecture with a React frontend and Express.js backend, featuring a sophisticated content management system with admin authentication. The portfolio allows dynamic creation and management of pages with customizable content blocks that can include text and media elements. The design emphasizes a dark, modern aesthetic with extensive animations and smooth user interactions.\n\n# User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n# System Architecture\n\n## Frontend Architecture\n- **Framework**: React 18 with TypeScript using Vite as the build tool\n- **Routing**: Wouter for lightweight client-side routing with dynamic page handling based on slugs\n- **UI Components**: Shadcn/ui component library built on Radix UI primitives with Tailwind CSS for styling\n- **State Management**: TanStack Query (React Query) for server state management and caching\n- **Styling**: Tailwind CSS with custom dark theme design system featuring purple/blue color palette\n- **Design System**: Consistent rounded corners, glass effects, and smooth animations throughout\n\n## Backend Architecture\n- **Framework**: Express.js with TypeScript running on Node.js\n- **Database ORM**: Drizzle ORM for type-safe database operations\n- **Database**: PostgreSQL with Neon serverless provider\n- **File Upload**: Multer middleware for handling media uploads with thumbnail generation\n- **Authentication**: Session-based admin authentication with bcrypt password hashing\n- **Real-time Communication**: WebSocket server for live updates and notifications\n\n## Data Architecture\nThe database schema includes:\n- **Pages**: Dynamic page management with slugs, titles, and ordering\n- **Blocks**: Flexible content blocks with JSON content storage supporting text, media, and mixed content types\n- **Media**: File management with metadata, thumbnails, and block associations\n- **Users**: Admin user management with role-based permissions\n- **Sessions**: Persistent session storage for admin authentication\n\n## Content Management System\n- **Block-based Content**: Each page consists of unlimited, reorderable content blocks\n- **Media Integration**: Images and videos can be attached to specific blocks with automatic thumbnail generation\n- **Admin Interface**: In-place editing with visual controls and confirmation dialogs\n- **Real-time Updates**: WebSocket-powered live updates across all connected clients\n\n## Authentication & Security\n- **Admin Access**: Password-protected admin mode with persistent session storage\n- **Role-based Permissions**: Admin-only content editing with visual indicators\n- **File Security**: Validated file uploads with type and size restrictions\n- **Session Management**: Secure session handling with automatic cleanup\n\n# External Dependencies\n\n## Database & Storage\n- **Neon Database**: Serverless PostgreSQL database provider configured via DATABASE_URL\n- **File Storage**: Local filesystem storage for uploaded media with organized directory structure\n\n## UI & Design Libraries\n- **Radix UI**: Comprehensive primitive component library for accessible UI components\n- **Tailwind CSS**: Utility-first CSS framework with custom design tokens\n- **Lucide Icons**: Modern icon library for consistent iconography\n- **Google Fonts**: Inter and JetBrains Mono fonts for typography\n\n## Development & Build Tools\n- **Vite**: Modern build tool with hot module replacement and optimized production builds\n- **TypeScript**: Type safety across the entire application stack\n- **Drizzle Kit**: Database migration and schema management tools\n- **ESBuild**: Fast JavaScript bundler for server-side code\n\n## Runtime Services\n- **WebSocket (ws)**: Real-time bidirectional communication between client and server\n- **Multer**: Multipart form data handling for file uploads\n- **Bcrypt**: Secure password hashing for admin authentication\n- **Nanoid**: URL-safe unique identifier generation\n\n## Replit-specific Integrations\n- **Replit Vite Plugins**: Development banner, error overlay, and cartographer for enhanced development experience\n- **Environment Detection**: Conditional plugin loading based on Replit environment variables","size_bytes":4284},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n        float: {\n          \"0%, 100%\": {\n            transform: \"translateY(0px)\",\n          },\n          \"50%\": {\n            transform: \"translateY(-10px)\",\n          },\n        },\n        slideIn: {\n          from: {\n            opacity: \"0\",\n            transform: \"translateY(20px)\",\n          },\n          to: {\n            opacity: \"1\",\n            transform: \"translateY(0)\",\n          },\n        },\n        fadeIn: {\n          from: {\n            opacity: \"0\",\n          },\n          to: {\n            opacity: \"1\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n        float: \"float 3s ease-in-out infinite\",\n        \"slide-in\": \"slideIn 0.3s ease-out\",\n        \"fade-in\": \"fadeIn 0.5s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":3440},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n          await import(\"@replit/vite-plugin-dev-banner\").then((m) =>\n            m.devBanner(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":1080},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });","size_bytes":482},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/password.py":{"content":"#!/usr/bin/env python3\n\"\"\"\nAdmin password configuration for Unicode's Portfolio\nThis file contains the admin password that can be imported by the Node.js server\n\"\"\"\n\n# Admin password - change this in production\nADMIN_PASSWORD = \"unicode2024!\"\n\ndef get_admin_password():\n    \"\"\"Return the admin password\"\"\"\n    return ADMIN_PASSWORD\n\nif __name__ == \"__main__\":\n    print(\"Current admin password:\", ADMIN_PASSWORD)\n","size_bytes":413},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport express from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { WebSocketServer, WebSocket } from \"ws\";\nimport multer from \"multer\";\nimport path from \"path\";\nimport fs from \"fs\";\nimport { exec } from \"child_process\";\nimport { promisify } from \"util\";\nimport bcrypt from \"bcrypt\";\nimport { storage } from \"./storage\";\nimport { db } from \"./db\";\nimport { insertPageSchema, insertBlockSchema, insertMediaSchema } from \"@shared/schema\";\nimport { z } from \"zod\";\n\n// Batch operation schemas\nconst batchOperationSchema = z.discriminatedUnion(\"type\", [\n  z.object({\n    type: z.literal(\"page_create\"),\n    data: insertPageSchema,\n  }),\n  z.object({\n    type: z.literal(\"page_update\"),\n    id: z.string(),\n    data: insertPageSchema.partial(),\n  }),\n  z.object({\n    type: z.literal(\"page_delete\"),\n    id: z.string(),\n  }),\n  z.object({\n    type: z.literal(\"block_create\"),\n    data: insertBlockSchema,\n  }),\n  z.object({\n    type: z.literal(\"block_update\"),\n    id: z.string(),\n    data: insertBlockSchema.partial(),\n  }),\n  z.object({\n    type: z.literal(\"block_delete\"),\n    id: z.string(),\n  }),\n  z.object({\n    type: z.literal(\"media_create\"),\n    data: insertMediaSchema,\n  }),\n  z.object({\n    type: z.literal(\"media_delete\"),\n    id: z.string(),\n  }),\n]);\n\nconst batchRequestSchema = z.object({\n  operations: z.array(batchOperationSchema),\n});\n\nconst execAsync = promisify(exec);\n\n// Ensure uploads directory exists\nconst uploadsDir = path.join(process.cwd(), \"uploads\");\nconst thumbnailsDir = path.join(uploadsDir, \"thumbnails\");\nif (!fs.existsSync(uploadsDir)) {\n  fs.mkdirSync(uploadsDir, { recursive: true });\n}\nif (!fs.existsSync(thumbnailsDir)) {\n  fs.mkdirSync(thumbnailsDir, { recursive: true });\n}\n\n// Multer configuration for file uploads\nconst upload = multer({\n  dest: uploadsDir,\n  limits: {\n    fileSize: 50 * 1024 * 1024, // 50MB limit\n  },\n  fileFilter: (req, file, cb) => {\n    const allowedTypes = /jpeg|jpg|png|gif|mp4|mov|avi|webm|svg/;\n    const extname = allowedTypes.test(path.extname(file.originalname).toLowerCase());\n    const mimetype = allowedTypes.test(file.mimetype);\n    \n    if (mimetype && extname) {\n      return cb(null, true);\n    }\n    cb(new Error(\"Invalid file type\"));\n  },\n});\n\n// Password validation (simulating password.py)\nconst ADMIN_PASSWORD = process.env.ADMIN_PASSWORD || \"unicode2024!\";\n\n// WebSocket connections storage\nconst wsConnections = new Set<WebSocket>();\n\nfunction broadcastToAll(data: any) {\n  const message = JSON.stringify(data);\n  wsConnections.forEach((ws) => {\n    if (ws.readyState === WebSocket.OPEN) {\n      ws.send(message);\n    }\n  });\n}\n\n// Generate video thumbnail\nasync function generateVideoThumbnail(videoPath: string, thumbnailPath: string): Promise<void> {\n  try {\n    await execAsync(`ffmpeg -i \"${videoPath}\" -ss 00:00:01.000 -vframes 1 -q:v 2 \"${thumbnailPath}\"`);\n  } catch (error) {\n    console.error('Failed to generate thumbnail:', error);\n    throw error;\n  }\n}\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  const httpServer = createServer(app);\n  \n  // WebSocket server\n  const wss = new WebSocketServer({ server: httpServer, path: '/ws' });\n  \n  wss.on('connection', (ws) => {\n    wsConnections.add(ws);\n    \n    ws.on('close', () => {\n      wsConnections.delete(ws);\n    });\n    \n    ws.on('error', (error) => {\n      console.error('WebSocket error:', error);\n      wsConnections.delete(ws);\n    });\n  });\n\n  // Static file serving for uploads\n  app.use('/uploads', (req, res, next) => {\n    res.header('Cross-Origin-Resource-Policy', 'cross-origin');\n    next();\n  }, express.static(uploadsDir));\n\n  // Admin authentication\n  app.post('/api/admin/login', async (req, res) => {\n    try {\n      const { password } = req.body;\n      \n      if (password === ADMIN_PASSWORD) {\n        const token = Buffer.from(`admin_${Date.now()}`).toString('base64');\n        res.json({ success: true, token });\n      } else {\n        res.status(401).json({ success: false, message: 'Неправильный пароль' });\n      }\n    } catch (error) {\n      res.status(500).json({ message: 'Server error' });\n    }\n  });\n\n  // Middleware to verify admin token\n  const verifyAdmin = (req: any, res: any, next: any) => {\n    const authHeader = req.headers.authorization;\n    if (!authHeader || !authHeader.startsWith('Bearer ')) {\n      return res.status(401).json({ message: 'Unauthorized' });\n    }\n    \n    const token = authHeader.substring(7);\n    try {\n      const decoded = Buffer.from(token, 'base64').toString();\n      if (decoded.startsWith('admin_')) {\n        next();\n      } else {\n        res.status(401).json({ message: 'Invalid token' });\n      }\n    } catch (error) {\n      res.status(401).json({ message: 'Invalid token' });\n    }\n  };\n\n  // Batch operations endpoint\n  app.post('/api/batch', verifyAdmin, async (req, res) => {\n    try {\n      const { operations } = batchRequestSchema.parse(req.body);\n      \n      if (operations.length === 0) {\n        return res.status(400).json({ message: 'No operations provided' });\n      }\n\n      const results: any[] = [];\n      const broadcastEvents: any[] = [];\n      const affectedPages = new Set<string>();\n\n      // Process all operations in a single transaction\n      await db.transaction(async (tx) => {\n        for (const operation of operations) {\n          try {\n            let result: any;\n\n            switch (operation.type) {\n              case 'page_create':\n                result = await storage.createPage(operation.data, tx);\n                affectedPages.add(result.id);\n                broadcastEvents.push({\n                  type: 'PAGE_CREATED',\n                  payload: result,\n                });\n                break;\n              case 'page_update':\n                result = await storage.updatePage(operation.id, operation.data, tx);\n                if (!result) {\n                  throw new Error(`Page ${operation.id} not found`);\n                }\n                affectedPages.add(result.id);\n                broadcastEvents.push({\n                  type: 'PAGE_UPDATED',\n                  payload: result,\n                });\n                break;\n              case 'page_delete':\n                const pageDeleted = await storage.deletePage(operation.id, tx);\n                if (!pageDeleted) {\n                  throw new Error(`Page ${operation.id} not found`);\n                }\n                affectedPages.add(operation.id);\n                result = { success: true };\n                broadcastEvents.push({\n                  type: 'PAGE_DELETED',\n                  payload: { id: operation.id },\n                });\n                break;\n              case 'block_create':\n                result = await storage.createBlock(operation.data, tx);\n                affectedPages.add(result.pageId);\n                broadcastEvents.push({\n                  type: 'BLOCK_CREATED',\n                  payload: result,\n                });\n                break;\n              case 'block_update':\n                result = await storage.updateBlock(operation.id, operation.data, tx);\n                if (!result) {\n                  throw new Error(`Block ${operation.id} not found`);\n                }\n                affectedPages.add(result.pageId);\n                broadcastEvents.push({\n                  type: 'BLOCK_UPDATED',\n                  payload: result,\n                });\n                break;\n              case 'block_delete':\n                // Get the block info before deletion to track pageId\n                const blockToDelete = await storage.getBlock(operation.id, tx);\n                if (!blockToDelete) {\n                  throw new Error(`Block ${operation.id} not found`);\n                }\n                affectedPages.add(blockToDelete.pageId);\n                const blockDeleted = await storage.deleteBlock(operation.id, tx);\n                if (!blockDeleted) {\n                  throw new Error(`Block ${operation.id} not found`);\n                }\n                result = { success: true };\n                broadcastEvents.push({\n                  type: 'BLOCK_DELETED',\n                  payload: { id: operation.id, pageId: blockToDelete.pageId },\n                });\n                break;\n              case 'media_create':\n                result = await storage.createMedia(operation.data, tx);\n                broadcastEvents.push({\n                  type: 'MEDIA_CREATED',\n                  payload: result,\n                });\n                break;\n              case 'media_delete':\n                const mediaDeleted = await storage.deleteMedia(operation.id, tx);\n                if (!mediaDeleted) {\n                  throw new Error(`Media ${operation.id} not found`);\n                }\n                result = { success: true };\n                broadcastEvents.push({\n                  type: 'MEDIA_DELETED',\n                  payload: { id: operation.id },\n                });\n                break;\n            }\n\n            results.push({\n              operation,\n              result,\n              success: true,\n            });\n          } catch (error) {\n            // If any operation fails, the entire transaction will be rolled back\n            throw new Error(`Operation failed: ${(error as Error).message}`);\n          }\n        }\n      });\n\n      // If we reach here, all operations succeeded. Now broadcast all events.\n      broadcastEvents.forEach(event => {\n        broadcastToAll(event);\n      });\n\n      // Broadcast comprehensive batch operation event for better real-time synchronization\n      if (operations.length > 1) {\n        broadcastToAll({\n          type: 'BATCH_OPERATION',\n          payload: {\n            operationCount: operations.length,\n            affectedPages: Array.from(affectedPages),\n            timestamp: new Date().toISOString(),\n          },\n        });\n      }\n\n      res.json({\n        success: true,\n        results,\n        message: `Successfully processed ${operations.length} operations`,\n      });\n\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        res.status(400).json({ \n          message: 'Invalid batch request', \n          errors: error.errors \n        });\n      } else {\n        res.status(500).json({ \n          message: 'Batch operation failed', \n          error: (error as Error).message \n        });\n      }\n    }\n  });\n\n  // Page routes\n  app.get('/api/pages', async (req, res) => {\n    try {\n      const pages = await storage.getPages();\n      res.json(pages);\n    } catch (error) {\n      res.status(500).json({ message: 'Failed to fetch pages' });\n    }\n  });\n\n  app.post('/api/pages', verifyAdmin, async (req, res) => {\n    try {\n      const pageData = insertPageSchema.parse(req.body);\n      const page = await storage.createPage(pageData);\n      \n      // Broadcast page creation\n      broadcastToAll({\n        type: 'PAGE_CREATED',\n        payload: page,\n      });\n      \n      res.json(page);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        res.status(400).json({ message: 'Invalid page data', errors: error.errors });\n      } else {\n        res.status(500).json({ message: 'Failed to create page' });\n      }\n    }\n  });\n\n  app.put('/api/pages/:id', verifyAdmin, async (req, res) => {\n    try {\n      const { id } = req.params;\n      const updates = insertPageSchema.partial().parse(req.body);\n      const page = await storage.updatePage(id, updates);\n      \n      if (!page) {\n        return res.status(404).json({ message: 'Page not found' });\n      }\n      \n      // Broadcast page update\n      broadcastToAll({\n        type: 'PAGE_UPDATED',\n        payload: page,\n      });\n      \n      res.json(page);\n    } catch (error) {\n      res.status(500).json({ message: 'Failed to update page' });\n    }\n  });\n\n  app.delete('/api/pages/:id', verifyAdmin, async (req, res) => {\n    try {\n      const { id } = req.params;\n      const success = await storage.deletePage(id);\n      \n      if (!success) {\n        return res.status(404).json({ message: 'Page not found' });\n      }\n      \n      // Broadcast page deletion\n      broadcastToAll({\n        type: 'PAGE_DELETED',\n        payload: { id },\n      });\n      \n      res.json({ success: true });\n    } catch (error) {\n      res.status(500).json({ message: 'Failed to delete page' });\n    }\n  });\n\n  // Block routes\n  app.get('/api/pages/:pageId/blocks', async (req, res) => {\n    try {\n      const { pageId } = req.params;\n      const blocks = await storage.getBlocksByPageId(pageId);\n      res.json(blocks);\n    } catch (error) {\n      res.status(500).json({ message: 'Failed to fetch blocks' });\n    }\n  });\n\n  app.post('/api/blocks', verifyAdmin, async (req, res) => {\n    try {\n      const blockData = insertBlockSchema.parse(req.body);\n      const block = await storage.createBlock(blockData);\n      \n      // Broadcast block creation\n      broadcastToAll({\n        type: 'BLOCK_CREATED',\n        payload: block,\n      });\n      \n      res.json(block);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        res.status(400).json({ message: 'Invalid block data', errors: error.errors });\n      } else {\n        res.status(500).json({ message: 'Failed to create block' });\n      }\n    }\n  });\n\n  app.put('/api/blocks/:id', verifyAdmin, async (req, res) => {\n    try {\n      const { id } = req.params;\n      const updates = insertBlockSchema.partial().parse(req.body);\n      const block = await storage.updateBlock(id, updates);\n      \n      if (!block) {\n        return res.status(404).json({ message: 'Block not found' });\n      }\n      \n      // Broadcast block update\n      broadcastToAll({\n        type: 'BLOCK_UPDATED',\n        payload: block,\n      });\n      \n      res.json(block);\n    } catch (error) {\n      res.status(500).json({ message: 'Failed to update block' });\n    }\n  });\n\n  app.delete('/api/blocks/:id', verifyAdmin, async (req, res) => {\n    try {\n      const { id } = req.params;\n      \n      // Get block info before deletion to track pageId for real-time sync\n      const blockToDelete = await storage.getBlock(id);\n      if (!blockToDelete) {\n        return res.status(404).json({ message: 'Block not found' });\n      }\n      \n      const success = await storage.deleteBlock(id);\n      \n      if (!success) {\n        return res.status(404).json({ message: 'Block not found' });\n      }\n      \n      // Broadcast block deletion with pageId for proper client-side cache invalidation\n      broadcastToAll({\n        type: 'BLOCK_DELETED',\n        payload: { id, pageId: blockToDelete.pageId },\n      });\n      \n      res.json({ success: true });\n    } catch (error) {\n      res.status(500).json({ message: 'Failed to delete block' });\n    }\n  });\n\n  // Media upload\n  app.post('/api/upload', verifyAdmin, upload.single('file'), async (req, res) => {\n    try {\n      if (!req.file) {\n        return res.status(400).json({ message: 'No file uploaded' });\n      }\n\n      const { blockId } = req.body;\n      const file = req.file;\n      const filename = `${Date.now()}-${file.originalname}`;\n      const filepath = path.join(uploadsDir, filename);\n      \n      // Move file to final location\n      fs.renameSync(file.path, filepath);\n      \n      let thumbnailUrl = null;\n      \n      // Generate thumbnail for videos\n      if (file.mimetype.startsWith('video/')) {\n        try {\n          const thumbnailFilename = `thumb_${Date.now()}.jpg`;\n          const thumbnailPath = path.join(thumbnailsDir, thumbnailFilename);\n          await generateVideoThumbnail(filepath, thumbnailPath);\n          thumbnailUrl = `/uploads/thumbnails/${thumbnailFilename}`;\n        } catch (error) {\n          console.error('Failed to generate video thumbnail:', error);\n        }\n      }\n      \n      const media = await storage.createMedia({\n        blockId: blockId || null,\n        filename,\n        originalName: file.originalname,\n        mimetype: file.mimetype,\n        size: file.size,\n        url: `/uploads/${filename}`,\n        thumbnailUrl,\n      });\n      \n      // Broadcast media upload\n      broadcastToAll({\n        type: 'MEDIA_UPLOADED',\n        payload: media,\n      });\n      \n      res.json(media);\n    } catch (error) {\n      console.error('Upload error:', error);\n      res.status(500).json({ message: 'Upload failed' });\n    }\n  });\n\n  // Get media for block\n  app.get('/api/blocks/:blockId/media', async (req, res) => {\n    try {\n      const { blockId } = req.params;\n      const media = await storage.getMediaByBlockId(blockId);\n      res.json(media);\n    } catch (error) {\n      res.status(500).json({ message: 'Failed to fetch media' });\n    }\n  });\n\n  // Reorder media within a block\n  app.patch('/api/blocks/:blockId/media/reorder', verifyAdmin, async (req, res) => {\n    try {\n      const { blockId } = req.params;\n      const { mediaOrderUpdates } = req.body; // Array of { id: string, order: number }\n      \n      if (!Array.isArray(mediaOrderUpdates)) {\n        return res.status(400).json({ message: 'mediaOrderUpdates must be an array' });\n      }\n\n      const updatedMedia = await storage.reorderMedia(blockId, mediaOrderUpdates);\n      \n      // Broadcast media reorder\n      broadcastToAll({\n        type: 'MEDIA_REORDERED',\n        payload: { blockId, media: updatedMedia },\n      });\n      \n      res.json(updatedMedia);\n    } catch (error) {\n      console.error('Media reorder error:', error);\n      res.status(500).json({ message: 'Failed to reorder media' });\n    }\n  });\n\n  return httpServer;\n}\n","size_bytes":17546},"server/storage.ts":{"content":"import {\n  users,\n  pages,\n  blocks,\n  media,\n  type User,\n  type InsertUser,\n  type Page,\n  type InsertPage,\n  type Block,\n  type InsertBlock,\n  type Media,\n  type InsertMedia,\n} from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, asc, desc, isNull, and } from \"drizzle-orm\";\n\nexport interface IStorage {\n  // User operations\n  getUser(id: string): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  \n  // Page operations\n  getPages(): Promise<Page[]>;\n  getPage(id: string): Promise<Page | undefined>;\n  getPageBySlug(slug: string): Promise<Page | undefined>;\n  createPage(page: InsertPage, tx?: any): Promise<Page>;\n  updatePage(id: string, updates: Partial<InsertPage>, tx?: any): Promise<Page | undefined>;\n  deletePage(id: string, tx?: any): Promise<boolean>;\n  \n  // Block operations\n  getBlocksByPageId(pageId: string): Promise<Block[]>;\n  getChildBlocks(parentId: string): Promise<Block[]>;\n  getBlock(id: string): Promise<Block | undefined>;\n  createBlock(block: InsertBlock, tx?: any): Promise<Block>;\n  updateBlock(id: string, updates: Partial<InsertBlock>, tx?: any): Promise<Block | undefined>;\n  deleteBlock(id: string, tx?: any): Promise<boolean>;\n  \n  // Media operations\n  getMediaByBlockId(blockId: string): Promise<Media[]>;\n  createMedia(media: InsertMedia, tx?: any): Promise<Media>;\n  deleteMedia(id: string, tx?: any): Promise<boolean>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  // User operations\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user || undefined;\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.username, username));\n    return user || undefined;\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const [user] = await db.insert(users).values(insertUser).returning();\n    return user;\n  }\n\n  // Page operations\n  async getPages(): Promise<Page[]> {\n    return await db.select().from(pages).where(eq(pages.isActive, true)).orderBy(asc(pages.order));\n  }\n\n  async getPage(id: string): Promise<Page | undefined> {\n    const [page] = await db.select().from(pages).where(eq(pages.id, id));\n    return page || undefined;\n  }\n\n  async getPageBySlug(slug: string): Promise<Page | undefined> {\n    const [page] = await db.select().from(pages).where(eq(pages.slug, slug));\n    return page || undefined;\n  }\n\n  async createPage(insertPage: InsertPage, tx?: any): Promise<Page> {\n    const dbContext = tx || db;\n    const [page] = await dbContext.insert(pages).values({\n      ...insertPage,\n      updatedAt: new Date(),\n    }).returning();\n    return page;\n  }\n\n  async updatePage(id: string, updates: Partial<InsertPage>, tx?: any): Promise<Page | undefined> {\n    const dbContext = tx || db;\n    const [page] = await dbContext\n      .update(pages)\n      .set({ ...updates, updatedAt: new Date() })\n      .where(eq(pages.id, id))\n      .returning();\n    return page || undefined;\n  }\n\n  async deletePage(id: string, tx?: any): Promise<boolean> {\n    const dbContext = tx || db;\n    const result = await dbContext.delete(pages).where(eq(pages.id, id));\n    return (result.rowCount ?? 0) > 0;\n  }\n\n  // Block operations\n  async getBlocksByPageId(pageId: string): Promise<Block[]> {\n    return await db.select().from(blocks)\n      .where(and(eq(blocks.pageId, pageId), isNull(blocks.parentId)))\n      .orderBy(asc(blocks.order));\n  }\n\n  async getChildBlocks(parentId: string, tx?: any): Promise<Block[]> {\n    const dbContext = tx || db;\n    return await dbContext.select().from(blocks)\n      .where(eq(blocks.parentId, parentId))\n      .orderBy(asc(blocks.order));\n  }\n\n  async getBlock(id: string, tx?: any): Promise<Block | undefined> {\n    const dbContext = tx || db;\n    const [block] = await dbContext.select().from(blocks).where(eq(blocks.id, id));\n    return block || undefined;\n  }\n\n  async createBlock(insertBlock: InsertBlock, tx?: any): Promise<Block> {\n    // Validate parent-child relationship\n    if (insertBlock.parentId) {\n      const parent = await this.getBlock(insertBlock.parentId, tx);\n      if (!parent) {\n        throw new Error(\"Parent block not found\");\n      }\n      if (parent.pageId !== insertBlock.pageId) {\n        throw new Error(\"Parent and child blocks must belong to the same page\");\n      }\n    }\n\n    const dbContext = tx || db;\n    const [block] = await dbContext.insert(blocks).values({\n      ...insertBlock,\n      updatedAt: new Date(),\n    }).returning();\n    return block;\n  }\n\n  async updateBlock(id: string, updates: Partial<InsertBlock>, tx?: any): Promise<Block | undefined> {\n    const currentBlock = await this.getBlock(id, tx);\n    if (!currentBlock) {\n      throw new Error(\"Block not found\");\n    }\n\n    // Validate pageId changes\n    if (updates.pageId !== undefined && updates.pageId !== currentBlock.pageId) {\n      // If block has a parent, ensure parent is on the same target page\n      if (currentBlock.parentId) {\n        const parent = await this.getBlock(currentBlock.parentId, tx);\n        if (parent && parent.pageId !== updates.pageId) {\n          throw new Error(\"Cannot move block to different page than its parent\");\n        }\n      }\n      \n      // If block has children, reject the operation as it would break subtree consistency\n      const children = await this.getChildBlocks(id, tx);\n      if (children.length > 0) {\n        throw new Error(\"Cannot move a block with children to a different page. Move the entire subtree instead.\");\n      }\n    }\n\n    // Validate parent-child relationship if parentId is being updated\n    if (updates.parentId !== undefined) {\n      // Prevent self-reference\n      if (updates.parentId === id) {\n        throw new Error(\"Block cannot be its own parent\");\n      }\n      \n      // Validate parent exists and belongs to same page\n      if (updates.parentId) {\n        const parent = await this.getBlock(updates.parentId, tx);\n        if (!parent) {\n          throw new Error(\"Parent block not found\");\n        }\n        \n        // Check page consistency\n        const targetPageId = updates.pageId ?? currentBlock.pageId;\n        if (parent.pageId !== targetPageId) {\n          throw new Error(\"Parent and child blocks must belong to the same page\");\n        }\n        \n        // Prevent cycles by checking if proposed parent is a descendant of current block\n        if (await this.isDescendant(id, updates.parentId, tx)) {\n          throw new Error(\"Cannot create circular parent-child relationship\");\n        }\n      }\n    }\n\n    const dbContext = tx || db;\n    const [block] = await dbContext\n      .update(blocks)\n      .set({ ...updates, updatedAt: new Date() })\n      .where(eq(blocks.id, id))\n      .returning();\n    return block || undefined;\n  }\n\n  // Helper method to check if a block is a descendant of another\n  private async isDescendant(ancestorId: string, blockId: string, tx?: any): Promise<boolean> {\n    const children = await this.getChildBlocks(ancestorId, tx);\n    for (const child of children) {\n      if (child.id === blockId) {\n        return true;\n      }\n      if (await this.isDescendant(child.id, blockId, tx)) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  async deleteBlock(id: string, tx?: any): Promise<boolean> {\n    try {\n      if (tx) {\n        // Use provided transaction\n        const children = await tx.select().from(blocks).where(eq(blocks.parentId, id));\n        for (const child of children) {\n          await this.deleteBlockInTransaction(tx, child.id);\n        }\n        \n        const deleteResult = await tx.delete(blocks).where(eq(blocks.id, id));\n        return (deleteResult.rowCount ?? 0) > 0;\n      } else {\n        // Create own transaction\n        const result = await db.transaction(async (innerTx) => {\n          const children = await innerTx.select().from(blocks).where(eq(blocks.parentId, id));\n          for (const child of children) {\n            await this.deleteBlockInTransaction(innerTx, child.id);\n          }\n          \n          const deleteResult = await innerTx.delete(blocks).where(eq(blocks.id, id));\n          return deleteResult.rowCount ?? 0;\n        });\n        \n        return result > 0;\n      }\n    } catch (error) {\n      console.error('Failed to delete block:', error);\n      return false;\n    }\n  }\n\n  // Helper method for transactional deletion\n  private async deleteBlockInTransaction(tx: any, id: string): Promise<void> {\n    // Recursively delete children first\n    const children = await tx.select().from(blocks).where(eq(blocks.parentId, id));\n    for (const child of children) {\n      await this.deleteBlockInTransaction(tx, child.id);\n    }\n    \n    // Then delete the block itself\n    await tx.delete(blocks).where(eq(blocks.id, id));\n  }\n\n  // Media operations\n  async getMediaByBlockId(blockId: string): Promise<Media[]> {\n    return await db.select().from(media)\n      .where(eq(media.blockId, blockId))\n      .orderBy(media.order, media.createdAt);\n  }\n\n  async createMedia(insertMedia: InsertMedia, tx?: any): Promise<Media> {\n    const dbContext = tx || db;\n    const [mediaItem] = await dbContext.insert(media).values(insertMedia).returning();\n    return mediaItem;\n  }\n\n  async deleteMedia(id: string, tx?: any): Promise<boolean> {\n    const dbContext = tx || db;\n    const result = await dbContext.delete(media).where(eq(media.id, id));\n    return (result.rowCount ?? 0) > 0;\n  }\n\n  async updateMediaOrder(id: string, newOrder: number, tx?: any): Promise<Media | undefined> {\n    const dbContext = tx || db;\n    const [mediaItem] = await dbContext\n      .update(media)\n      .set({ order: newOrder })\n      .where(eq(media.id, id))\n      .returning();\n    return mediaItem;\n  }\n\n  async reorderMedia(blockId: string, mediaOrderUpdates: { id: string; order: number }[], tx?: any): Promise<Media[]> {\n    const dbContext = tx || db;\n    \n    // Update each media item's order in the same transaction\n    for (const update of mediaOrderUpdates) {\n      await dbContext\n        .update(media)\n        .set({ order: update.order })\n        .where(eq(media.id, update.id));\n    }\n    \n    // Return the updated media list\n    return await this.getMediaByBlockId(blockId);\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":10389},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql, relations } from \"drizzle-orm\";\nimport { pgTable, text, varchar, timestamp, integer, jsonb, boolean } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  username: text(\"username\").notNull().unique(),\n  password: text(\"password\").notNull(),\n  isAdmin: boolean(\"is_admin\").default(false),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const pages = pgTable(\"pages\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  title: text(\"title\").notNull(),\n  slug: text(\"slug\").notNull().unique(),\n  isActive: boolean(\"is_active\").default(true),\n  order: integer(\"order\").default(0),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const blocks = pgTable(\"blocks\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  pageId: varchar(\"page_id\").notNull().references(() => pages.id, { onDelete: \"cascade\" }),\n  parentId: varchar(\"parent_id\"), // references blocks.id via application logic\n  type: text(\"type\").notNull(), // \"text\", \"media\", \"text_media\"\n  side: text(\"side\"), // \"left\", \"right\", null for main blocks\n  content: jsonb(\"content\").notNull(), // flexible content structure\n  order: integer(\"order\").default(0),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const media = pgTable(\"media\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  blockId: varchar(\"block_id\").references(() => blocks.id, { onDelete: \"cascade\" }),\n  filename: text(\"filename\").notNull(),\n  originalName: text(\"original_name\").notNull(),\n  mimetype: text(\"mimetype\").notNull(),\n  size: integer(\"size\").notNull(),\n  url: text(\"url\").notNull(),\n  thumbnailUrl: text(\"thumbnail_url\"),\n  order: integer(\"order\").default(0),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const sessions = pgTable(\"sessions\", {\n  sid: varchar(\"sid\").primaryKey(),\n  sess: jsonb(\"sess\").notNull(),\n  expire: timestamp(\"expire\").notNull(),\n});\n\n// Relations\nexport const pagesRelations = relations(pages, ({ many }) => ({\n  blocks: many(blocks),\n}));\n\nexport const blocksRelations = relations(blocks, ({ one, many }) => ({\n  page: one(pages, {\n    fields: [blocks.pageId],\n    references: [pages.id],\n  }),\n  parent: one(blocks, {\n    fields: [blocks.parentId],\n    references: [blocks.id],\n    relationName: \"parent\",\n  }),\n  children: many(blocks, {\n    relationName: \"parent\",\n  }),\n  media: many(media),\n}));\n\nexport const mediaRelations = relations(media, ({ one }) => ({\n  block: one(blocks, {\n    fields: [media.blockId],\n    references: [blocks.id],\n  }),\n}));\n\n// Schemas\nexport const insertUserSchema = createInsertSchema(users).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertPageSchema = createInsertSchema(pages).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertBlockSchema = createInsertSchema(blocks).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertMediaSchema = createInsertSchema(media).omit({\n  id: true,\n  createdAt: true,\n});\n\n// Types\nexport type User = typeof users.$inferSelect;\nexport type InsertUser = z.infer<typeof insertUserSchema>;\n\nexport type Page = typeof pages.$inferSelect;\nexport type InsertPage = z.infer<typeof insertPageSchema>;\n\nexport type Block = typeof blocks.$inferSelect;\nexport type InsertBlock = z.infer<typeof insertBlockSchema>;\n\nexport type Media = typeof media.$inferSelect;\nexport type InsertMedia = z.infer<typeof insertMediaSchema>;\n","size_bytes":3713},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { AdminProvider } from \"@/hooks/useAdmin\";\nimport { EditSessionProvider } from \"@/contexts/EditSessionContext\";\nimport Portfolio from \"@/pages/Portfolio\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={Portfolio} />\n      <Route path=\"/:pageSlug\" component={Portfolio} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <AdminProvider>\n        <EditSessionProvider>\n          <TooltipProvider>\n            <div className=\"dark\">\n              <Toaster />\n              <Router />\n            </div>\n          </TooltipProvider>\n        </EditSessionProvider>\n      </AdminProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":1069},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700;800;900&display=swap');\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(240, 10%, 6%);\n  --foreground: hsl(240, 5%, 95%);\n  --card: hsl(240, 8%, 10%);\n  --card-foreground: hsl(240, 5%, 90%);\n  --popover: hsl(240, 10%, 8%);\n  --popover-foreground: hsl(240, 5%, 95%);\n  --primary: hsl(262, 80%, 65%);\n  --primary-foreground: hsl(240, 5%, 95%);\n  --secondary: hsl(240, 20%, 12%);\n  --secondary-foreground: hsl(240, 5%, 80%);\n  --muted: hsl(240, 8%, 15%);\n  --muted-foreground: hsl(240, 5%, 65%);\n  --accent: hsl(262, 70%, 70%);\n  --accent-foreground: hsl(240, 5%, 10%);\n  --destructive: hsl(0, 85%, 60%);\n  --destructive-foreground: hsl(240, 5%, 95%);\n  --border: hsl(240, 8%, 20%);\n  --input: hsl(240, 8%, 15%);\n  --ring: hsl(262, 80%, 65%);\n  --chart-1: hsl(262, 80%, 65%);\n  --chart-2: hsl(159.7826, 100%, 36.0784%);\n  --chart-3: hsl(42.0290, 92.8251%, 56.2745%);\n  --chart-4: hsl(147.1429, 78.5047%, 41.9608%);\n  --chart-5: hsl(341.4894, 75.2000%, 50.9804%);\n  --sidebar: hsl(240, 8%, 10%);\n  --sidebar-foreground: hsl(240, 5%, 90%);\n  --sidebar-primary: hsl(262, 80%, 65%);\n  --sidebar-primary-foreground: hsl(240, 5%, 95%);\n  --sidebar-accent: hsl(262, 70%, 70%);\n  --sidebar-accent-foreground: hsl(240, 5%, 10%);\n  --sidebar-border: hsl(240, 8%, 20%);\n  --sidebar-ring: hsl(262, 80%, 65%);\n  --font-sans: \"Inter\", system-ui, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: \"JetBrains Mono\", monospace;\n  --radius: 12px;\n  --shadow-2xs: 0px 2px 0px 0px hsl(262, 80%, 65% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(262, 80%, 65% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(262, 80%, 65% / 0.00), 0px 1px 2px -1px hsl(262, 80%, 65% / 0.00);\n  --shadow: 0px 2px 0px 0px hsl(262, 80%, 65% / 0.00), 0px 1px 2px -1px hsl(262, 80%, 65% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(262, 80%, 65% / 0.00), 0px 2px 4px -1px hsl(262, 80%, 65% / 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(262, 80%, 65% / 0.00), 0px 4px 6px -1px hsl(262, 80%, 65% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(262, 80%, 65% / 0.00), 0px 8px 10px -1px hsl(262, 80%, 65% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(262, 80%, 65% / 0.00);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);\n  }\n}\n\n@layer components {\n  .glass-effect {\n    backdrop-filter: blur(10px);\n    background: rgba(255, 255, 255, 0.05);\n    border: 1px solid rgba(255, 255, 255, 0.1);\n  }\n  \n  .hover-lift:hover {\n    transform: translateY(-4px);\n    box-shadow: 0 20px 40px rgba(139, 92, 246, 0.3);\n  }\n  \n  .admin-mode .edit-handle {\n    opacity: 1;\n    pointer-events: all;\n  }\n  \n  .edit-handle {\n    opacity: 0;\n    pointer-events: none;\n    transition: opacity 0.3s ease;\n  }\n  \n  .block-hover:hover .add-media-btn {\n    opacity: 1;\n    transform: translateX(0);\n  }\n  \n  .add-media-btn {\n    opacity: 0;\n    transform: translateX(10px);\n    transition: all 0.3s ease;\n  }\n  \n  .modal-overlay {\n    backdrop-filter: blur(8px);\n    background: rgba(0, 0, 0, 0.7);\n  }\n}\n\n@layer utilities {\n  .animate-float {\n    animation: float 6s ease-in-out infinite;\n  }\n\n  .animate-float-sync {\n    animation: float 6s ease-in-out infinite;\n  }\n\n  .animate-slide-up {\n    animation: slideUp 0.5s ease-out forwards;\n  }\n\n  .animate-fade-in {\n    animation: fadeIn 0.6s ease-out forwards;\n  }\n\n  .animate-scale-in {\n    animation: scaleIn 0.4s cubic-bezier(0.4, 0, 0.2, 1) forwards;\n  }\n  \n  .slide-in {\n    animation: slideIn 0.3s ease-out;\n  }\n  \n  .fade-in {\n    animation: fadeIn 0.5s ease-out;\n  }\n\n  /* Стили для перетаскиваемого медиа */\n  .media-draggable {\n    cursor: move;\n    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);\n    user-select: none;\n  }\n\n  .media-draggable:hover {\n    transform: scale(1.02);\n    box-shadow: 0 8px 25px rgba(0, 0, 0, 0.15);\n  }\n\n  .media-draggable.dragging {\n    z-index: 50;\n    transform: rotate(2deg) scale(1.05);\n    box-shadow: 0 20px 40px rgba(0, 0, 0, 0.3);\n  }\n\n  /* Зона для вставки медиа справа */\n  .media-drop-zone {\n    position: absolute;\n    right: -30px;\n    top: 20%;\n    width: 50px;\n    height: 60%;\n    border: 2px dashed transparent;\n    border-radius: 8px;\n    transition: all 0.3s ease;\n    opacity: 0;\n    pointer-events: none;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n  }\n\n  .block-hover:hover .media-drop-zone {\n    opacity: 1;\n    pointer-events: all;\n  }\n\n  .media-drop-zone:hover,\n  .media-drop-zone.active {\n    border-color: hsl(var(--primary));\n    background: hsl(var(--primary) / 0.1);\n  }\n\n  .media-drop-zone::before {\n    content: \"📸\";\n    font-size: 20px;\n    opacity: 0.7;\n  }\n  \n  @keyframes float {\n    0%, 100% { \n      transform: translateY(0px); \n    }\n    50% { \n      transform: translateY(-10px); \n    }\n  }\n\n  @keyframes slideUp {\n    from {\n      opacity: 0;\n      transform: translateY(30px);\n    }\n    to {\n      opacity: 1;\n      transform: translateY(0);\n    }\n  }\n\n  @keyframes scaleIn {\n    from {\n      opacity: 0;\n      transform: scale(0.95);\n    }\n    to {\n      opacity: 1;\n      transform: scale(1);\n    }\n  }\n  \n  @keyframes slideIn {\n    from {\n      opacity: 0;\n      transform: translateY(20px);\n    }\n    to {\n      opacity: 1;\n      transform: translateY(0);\n    }\n  }\n  \n  @keyframes fadeIn {\n    from { \n      opacity: 0; \n    }\n    to { \n      opacity: 1; \n    }\n  }\n}\n","size_bytes":5623},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/AdminAuthModal.tsx":{"content":"import { useState } from \"react\";\nimport { useAdmin } from \"@/hooks/useAdmin\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nexport default function AdminAuthModal() {\n  const { isAdminModalOpen, closeAdminModal, login } = useAdmin();\n  const { toast } = useToast();\n  const [password, setPassword] = useState(\"\");\n  const [isLoading, setIsLoading] = useState(false);\n\n  console.log('AdminAuthModal render: isAdminModalOpen =', isAdminModalOpen);\n\n  const handleLogin = async () => {\n    if (!password.trim()) return;\n\n    setIsLoading(true);\n    try {\n      const response = await fetch('/api/admin/login', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ password }),\n      });\n\n      const data = await response.json();\n\n      if (data.success) {\n        login(data.token);\n        closeAdminModal();\n        setPassword(\"\");\n        toast({\n          title: \"Admin access granted\",\n          description: \"You are now in admin mode.\",\n        });\n      } else {\n        toast({\n          title: \"Неправильный пароль\",\n          description: data.message,\n          variant: \"destructive\",\n        });\n      }\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Failed to authenticate. Please try again.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleClose = () => {\n    setPassword(\"\");\n    closeAdminModal();\n  };\n\n  const handleKeyPress = (e: React.KeyboardEvent) => {\n    if (e.key === 'Enter') {\n      handleLogin();\n    }\n  };\n\n  console.log('About to render Dialog with open =', isAdminModalOpen);\n  \n  return (\n    <Dialog open={isAdminModalOpen} onOpenChange={handleClose}>\n      <DialogContent className=\"slide-in\" data-testid=\"modal-admin-auth\">\n        <DialogHeader>\n          <DialogTitle className=\"text-center\">Admin Access</DialogTitle>\n        </DialogHeader>\n        <div className=\"space-y-4\">\n          <Input\n            type=\"password\"\n            placeholder=\"Enter admin password\"\n            value={password}\n            onChange={(e) => setPassword(e.target.value)}\n            onKeyPress={handleKeyPress}\n            className=\"w-full\"\n            data-testid=\"input-admin-password\"\n          />\n          <div className=\"flex space-x-3\">\n            <Button\n              onClick={handleLogin}\n              disabled={!password.trim() || isLoading}\n              className=\"flex-1\"\n              data-testid=\"button-admin-login\"\n            >\n              {isLoading ? \"Logging in...\" : \"Login\"}\n            </Button>\n            <Button\n              variant=\"secondary\"\n              onClick={handleClose}\n              disabled={isLoading}\n              className=\"flex-1\"\n              data-testid=\"button-admin-cancel\"\n            >\n              Cancel\n            </Button>\n          </div>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":3176},"client/src/components/AdminPanel.tsx":{"content":"import { useAdmin } from \"@/hooks/useAdmin\";\nimport { Button } from \"@/components/ui/button\";\nimport { LogOut, Wifi } from \"lucide-react\";\n\nexport default function AdminPanel() {\n  const { logout } = useAdmin();\n\n  return (\n    <div className=\"fixed bottom-6 right-6 z-30\" data-testid=\"admin-panel\">\n      <div className=\"bg-card rounded-lg p-4 shadow-2xl glass-effect slide-in\">\n        <div className=\"flex items-center space-x-3\">\n          <div className=\"w-3 h-3 bg-primary rounded-full animate-pulse\"></div>\n          <Wifi className=\"w-4 h-4 text-primary\" />\n          <span className=\"text-sm font-medium\">Admin Mode</span>\n          <Button\n            size=\"sm\"\n            variant=\"destructive\"\n            onClick={logout}\n            data-testid=\"button-admin-logout\"\n          >\n            <LogOut className=\"w-4 h-4 mr-2\" />\n            Exit\n          </Button>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":924},"client/src/components/ContentBlock.tsx":{"content":"import { useState, useRef } from \"react\";\nimport { useAdmin } from \"@/hooks/useAdmin\";\nimport { useMutation, useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Button } from \"@/components/ui/button\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Input } from \"@/components/ui/input\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Edit2, Plus, Save, X, Trash2, Copy } from \"lucide-react\";\nimport { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle } from \"@/components/ui/alert-dialog\";\nimport ContextMenu, { useContextMenu } from \"@/components/ContextMenu\";\nimport type { Block, Media } from \"@shared/schema\";\n\ninterface ContentBlockProps {\n  block: Block;\n  index: number;\n  isAdmin: boolean;\n}\n\nexport default function ContentBlock({ block, index, isAdmin }: ContentBlockProps) {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [isEditing, setIsEditing] = useState(false);\n  const [showDeleteDialog, setShowDeleteDialog] = useState(false);\n  const [editContent, setEditContent] = useState(block.content);\n  const fileInputRef = useRef<HTMLInputElement>(null);\n  const rightMediaInputRef = useRef<HTMLInputElement>(null);\n  const { contextMenu, showContextMenu, hideContextMenu } = useContextMenu();\n  const [draggedMediaId, setDraggedMediaId] = useState<string | null>(null);\n  const [rightSideMedia, setRightSideMedia] = useState<Media[]>([]);\n\n  // Fetch media for this block\n  const { data: media = [] } = useQuery<Media[]>({\n    queryKey: [\"/api/blocks\", block.id, \"media\"],\n  });\n\n  const updateBlockMutation = useMutation({\n    mutationFn: async (data: any) => {\n      const response = await apiRequest(\"PUT\", `/api/blocks/${block.id}`, data);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/pages\", block.pageId, \"blocks\"] });\n      setIsEditing(false);\n      toast({\n        title: \"Block updated\",\n        description: \"Your changes have been saved successfully.\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to update block. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteBlockMutation = useMutation({\n    mutationFn: async () => {\n      await apiRequest(\"DELETE\", `/api/blocks/${block.id}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/pages\", block.pageId, \"blocks\"] });\n      toast({\n        title: \"Block deleted\",\n        description: \"The block has been removed successfully.\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to delete block. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const uploadMediaMutation = useMutation({\n    mutationFn: async (file: File) => {\n      const formData = new FormData();\n      formData.append('file', file);\n      formData.append('blockId', block.id);\n      \n      const response = await fetch('/api/upload', {\n        method: 'POST',\n        body: formData,\n        headers: {\n          'Authorization': `Bearer ${localStorage.getItem('adminToken')}`,\n        },\n      });\n      \n      if (!response.ok) {\n        throw new Error('Upload failed');\n      }\n      \n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/blocks\", block.id, \"media\"] });\n      toast({\n        title: \"Media uploaded\",\n        description: \"Your file has been uploaded successfully.\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Upload failed\",\n        description: \"Failed to upload media. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSave = () => {\n    updateBlockMutation.mutate({\n      content: editContent,\n    });\n  };\n\n  const handleCancel = () => {\n    setEditContent(block.content);\n    setIsEditing(false);\n  };\n\n  const handleDelete = () => {\n    deleteBlockMutation.mutate();\n  };\n\n  const handleFileUpload = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const file = event.target.files?.[0];\n    if (file) {\n      uploadMediaMutation.mutate(file);\n    }\n  };\n\n  const handleCopyBlock = async () => {\n    try {\n      const textContent = block.content && typeof block.content === 'object' && 'text' in block.content\n        ? (block.content as any).text \n        : JSON.stringify(block.content || \"\");\n      await navigator.clipboard.writeText(textContent);\n      toast({\n        title: \"Скопировано\",\n        description: \"Содержимое блока скопировано в буфер обмена.\",\n      });\n    } catch (error) {\n      toast({\n        title: \"Ошибка\",\n        description: \"Не удалось скопировать содержимое.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleBlockContextMenu = (e: React.MouseEvent) => {\n    if (isAdmin) {\n      showContextMenu(e);\n    }\n  };\n\n  const handleRightMediaUpload = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const file = event.target.files?.[0];\n    if (file) {\n      uploadMediaMutation.mutate(file);\n    }\n  };\n\n  const handleMediaDragStart = (e: React.DragEvent, mediaId: string) => {\n    setDraggedMediaId(mediaId);\n    e.dataTransfer.setData('text/plain', mediaId);\n  };\n\n  const handleMediaDragEnd = () => {\n    setDraggedMediaId(null);\n  };\n\n  const handleMediaDrop = (e: React.DragEvent) => {\n    e.preventDefault();\n    // Здесь будет логика для изменения позиции медиа\n  };\n\n  const renderContent = () => {\n    const content = isEditing ? editContent : block.content;\n    \n    if (block.type === \"text\") {\n      return isEditing ? (\n        <div className=\"space-y-4\">\n          <div>\n            <label className=\"text-sm font-medium\">Title</label>\n            <Input\n              value={(content as any)?.title || \"\"}\n              onChange={(e) => setEditContent({ ...(content as any), title: e.target.value })}\n              className=\"mt-1\"\n              data-testid=\"input-block-title\"\n            />\n          </div>\n          <div>\n            <label className=\"text-sm font-medium\">Content</label>\n            <Textarea\n              value={(content as any)?.text || \"\"}\n              onChange={(e) => setEditContent({ ...(content as any), text: e.target.value })}\n              rows={6}\n              className=\"mt-1\"\n              data-testid=\"textarea-block-content\"\n            />\n          </div>\n        </div>\n      ) : (\n        <div>\n          {(content as any).title && (\n            <h2 className=\"text-2xl font-bold mb-4 bg-gradient-to-r from-primary to-accent bg-clip-text text-transparent\">\n              {(content as any).title}\n            </h2>\n          )}\n          {(content as any).text && (\n            <p className=\"text-lg text-card-foreground leading-relaxed whitespace-pre-wrap\">\n              {(content as any).text}\n            </p>\n          )}\n        </div>\n      );\n    }\n\n    return null;\n  };\n\n  const renderMedia = () => {\n    if (media.length === 0) return null;\n\n    return (\n      <div className=\"relative\">\n        <div className=\"grid gap-4\">\n          {media.map((item) => (\n            <div key={item.id} className=\"relative\">\n              {item.mimetype.startsWith('image/') ? (\n                <img\n                  src={item.url}\n                  alt={item.originalName}\n                  className=\"rounded-lg max-w-full h-auto\"\n                  data-testid={`img-media-${item.id}`}\n                />\n              ) : item.mimetype.startsWith('video/') ? (\n                <video\n                  src={item.url}\n                  controls\n                  className=\"rounded-lg max-w-full h-auto\"\n                  data-testid={`video-media-${item.id}`}\n                >\n                  Your browser does not support the video tag.\n                </video>\n              ) : (\n                <div className=\"p-4 bg-muted rounded-lg\">\n                  <p className=\"text-sm\">{item.originalName}</p>\n                </div>\n              )}\n            </div>\n          ))}\n        </div>\n      </div>\n    );\n  };\n\n  return (\n    <div \n      className=\"relative group block-hover\" \n      data-testid={`block-${block.id}`}\n      onContextMenu={handleBlockContextMenu}\n    >\n      {/* Edit Handle (Admin Only) */}\n      {isAdmin && !isEditing && (\n        <Button\n          size=\"sm\"\n          variant=\"secondary\"\n          className=\"absolute -top-2 -left-2 w-8 h-8 edit-handle\"\n          onClick={() => setIsEditing(true)}\n          data-testid=\"button-edit-block\"\n        >\n          <Edit2 className=\"w-4 h-4\" />\n        </Button>\n      )}\n      \n      <div className=\"bg-card rounded-lg p-8 hover-lift relative overflow-hidden\">\n        {block.type === \"text\" && (\n          <div className=\"flex items-start space-x-8\">\n            <div className=\"flex-1\">\n              {renderContent()}\n            </div>\n            \n            {/* Media Area */}\n            <div className=\"relative\">\n              {renderMedia()}\n              \n              {/* Add Media Button */}\n              {isAdmin && (\n                <Button\n                  size=\"sm\"\n                  variant=\"secondary\"\n                  className=\"absolute top-4 -right-2 w-8 h-8 add-media-btn\"\n                  onClick={() => fileInputRef.current?.click()}\n                  disabled={uploadMediaMutation.isPending}\n                  data-testid=\"button-add-media\"\n                >\n                  <Plus className=\"w-4 h-4\" />\n                </Button>\n              )}\n              \n              <input\n                ref={fileInputRef}\n                type=\"file\"\n                accept=\"image/*,video/*\"\n                onChange={handleFileUpload}\n                className=\"hidden\"\n                data-testid=\"input-file-upload\"\n              />\n            </div>\n          </div>\n        )}\n        \n        {/* Edit Mode Controls */}\n        {isEditing && (\n          <div className=\"flex justify-end space-x-3 mt-6 pt-6 border-t border-border\">\n            <Button\n              variant=\"outline\"\n              onClick={handleCancel}\n              disabled={updateBlockMutation.isPending}\n              data-testid=\"button-cancel-edit\"\n            >\n              <X className=\"w-4 h-4 mr-2\" />\n              Cancel\n            </Button>\n            <Button\n              variant=\"destructive\"\n              onClick={() => setShowDeleteDialog(true)}\n              disabled={updateBlockMutation.isPending || deleteBlockMutation.isPending}\n              data-testid=\"button-delete-block\"\n            >\n              <Trash2 className=\"w-4 h-4 mr-2\" />\n              Delete\n            </Button>\n            <Button\n              onClick={handleSave}\n              disabled={updateBlockMutation.isPending}\n              data-testid=\"button-save-block\"\n            >\n              <Save className=\"w-4 h-4 mr-2\" />\n              {updateBlockMutation.isPending ? \"Saving...\" : \"Save\"}\n            </Button>\n          </div>\n        )}\n      </div>\n\n      {/* Delete Confirmation Dialog */}\n      <AlertDialog open={showDeleteDialog} onOpenChange={setShowDeleteDialog}>\n        <AlertDialogContent>\n          <AlertDialogHeader>\n            <AlertDialogTitle>Delete Block</AlertDialogTitle>\n            <AlertDialogDescription>\n              Are you sure you want to delete this block? This action cannot be undone.\n            </AlertDialogDescription>\n          </AlertDialogHeader>\n          <AlertDialogFooter>\n            <AlertDialogCancel data-testid=\"button-cancel-delete\">Cancel</AlertDialogCancel>\n            <AlertDialogAction\n              onClick={handleDelete}\n              className=\"bg-destructive hover:bg-destructive/90\"\n              data-testid=\"button-confirm-delete\"\n            >\n              Delete\n            </AlertDialogAction>\n          </AlertDialogFooter>\n        </AlertDialogContent>\n      </AlertDialog>\n\n      {/* Block Context Menu */}\n      <ContextMenu\n        x={contextMenu.x}\n        y={contextMenu.y}\n        isVisible={contextMenu.isVisible}\n        onClose={hideContextMenu}\n        options={[\n          {\n            icon: <Edit2 className=\"w-4 h-4\" />,\n            label: \"Редактировать\",\n            onClick: () => setIsEditing(true),\n          },\n          {\n            icon: <Copy className=\"w-4 h-4\" />,\n            label: \"Копировать текст\",\n            onClick: handleCopyBlock,\n          },\n          {\n            icon: <Trash2 className=\"w-4 h-4\" />,\n            label: \"Удалить блок\",\n            variant: \"destructive\",\n            onClick: () => setShowDeleteDialog(true),\n          },\n        ]}\n      />\n    </div>\n  );\n}\n","size_bytes":12970},"client/src/components/Header.tsx":{"content":"import { useState } from \"react\";\nimport { Link, useParams } from \"wouter\";\nimport { useAdmin } from \"@/hooks/useAdmin\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Plus, User, Settings, Edit2, Trash2 } from \"lucide-react\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport ContextMenu, { useContextMenu } from \"@/components/ContextMenu\";\nimport AdminSaveButton from \"@/components/AdminSaveButton\";\nimport type { Page } from \"@shared/schema\";\n\ninterface HeaderProps {\n  pages: Page[];\n  currentPageId: string;\n}\n\nexport default function Header({ pages, currentPageId }: HeaderProps) {\n  const { pageSlug } = useParams();\n  const { isAdmin, openAdminModal } = useAdmin();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [showAddPage, setShowAddPage] = useState(false);\n  const [newPageTitle, setNewPageTitle] = useState(\"\");\n  const [showEditPage, setShowEditPage] = useState(false);\n  const [editingPage, setEditingPage] = useState<Page | null>(null);\n  const [editPageTitle, setEditPageTitle] = useState(\"\");\n  const { contextMenu, showContextMenu, hideContextMenu } = useContextMenu();\n\n  const createPageMutation = useMutation({\n    mutationFn: async (data: { title: string; slug: string }) => {\n      const response = await apiRequest(\"POST\", \"/api/pages\", data);\n      return response.json();\n    },\n    onSuccess: (newPage) => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/pages\"] });\n      setShowAddPage(false);\n      setNewPageTitle(\"\");\n      toast({\n        title: \"Page created\",\n        description: `\"${newPage.title}\" has been created successfully.`,\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to create page. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updatePageMutation = useMutation({\n    mutationFn: async (data: { id: string; title: string; slug: string }) => {\n      const response = await apiRequest(\"PUT\", `/api/pages/${data.id}`, { title: data.title, slug: data.slug });\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/pages\"] });\n      setShowEditPage(false);\n      setEditingPage(null);\n      setEditPageTitle(\"\");\n      toast({\n        title: \"Page updated\",\n        description: \"Page has been updated successfully.\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to update page. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deletePageMutation = useMutation({\n    mutationFn: async (pageId: string) => {\n      await apiRequest(\"DELETE\", `/api/pages/${pageId}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/pages\"] });\n      toast({\n        title: \"Page deleted\",\n        description: \"Page has been deleted successfully.\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to delete page. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleCreatePage = () => {\n    if (!newPageTitle.trim()) return;\n    \n    const slug = newPageTitle.toLowerCase().replace(/[^a-z0-9]+/g, '-').replace(/^-|-$/g, '');\n    createPageMutation.mutate({\n      title: newPageTitle.trim(),\n      slug,\n    });\n  };\n\n  const handleUpdatePage = () => {\n    if (!editPageTitle.trim() || !editingPage) return;\n    \n    const slug = editPageTitle.toLowerCase().replace(/[^a-z0-9]+/g, '-').replace(/^-|-$/g, '');\n    updatePageMutation.mutate({\n      id: editingPage.id,\n      title: editPageTitle.trim(),\n      slug,\n    });\n  };\n\n  const showPageContextMenu = (e: React.MouseEvent, page: Page) => {\n    showContextMenu(e);\n    setEditingPage(page);\n    setEditPageTitle(page.title);\n  };\n\n  return (\n    <header className=\"fixed top-0 left-0 right-0 z-40 glass-effect\" data-testid=\"header\">\n      <div className=\"max-w-7xl mx-auto px-6 py-4\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex flex-1 items-center justify-between\">\n            {/* Logo */}\n            <Link href=\"/\" className=\"flex items-center space-x-3 hover:opacity-80 transition-opacity\">\n              <div className=\"w-10 h-10 bg-primary rounded-lg flex items-center justify-center font-bold text-lg animate-float\">\n                U\n              </div>\n              <h1 className=\"text-xl font-semibold animate-float-sync\">Unicode's Portfolio</h1>\n            </Link>\n            \n            {/* Navigation Tabs - Centered */}\n            <nav className=\"flex-1 flex justify-center\" data-testid=\"nav-tabs\">\n              <div className=\"flex bg-muted rounded-lg p-1\">\n                {pages.map((page) => (\n                  <Link \n                    key={page.id}\n                    href={page.slug === 'home' ? '/' : `/${page.slug}`}\n                    className={`px-4 py-2 rounded-md font-medium transition-all ${\n                      page.id === currentPageId || (page.slug === 'home' && !pageSlug)\n                        ? 'bg-primary text-primary-foreground'\n                        : 'text-muted-foreground hover:text-foreground'\n                    }`}\n                    data-testid={`nav-tab-${page.slug}`}\n                    onContextMenu={(e) => {\n                      if (isAdmin) {\n                        showPageContextMenu(e, page);\n                      }\n                    }}\n                  >\n                    {page.title}\n                  </Link>\n                ))}\n                \n                {/* Add Page Button (Admin Only) */}\n                {isAdmin && (\n                  <Dialog open={showAddPage} onOpenChange={setShowAddPage}>\n                    <DialogTrigger asChild>\n                      <Button\n                        size=\"sm\"\n                        className=\"w-8 h-8 bg-accent text-accent-foreground rounded-lg hover:bg-accent/80 ml-2\"\n                        data-testid=\"button-add-page\"\n                      >\n                        <Plus className=\"w-4 h-4\" />\n                      </Button>\n                    </DialogTrigger>\n                    <DialogContent>\n                      <DialogHeader>\n                        <DialogTitle>Add New Page</DialogTitle>\n                      </DialogHeader>\n                      <div className=\"space-y-4\">\n                        <div>\n                          <label className=\"text-sm font-medium\">Page Title</label>\n                          <Input\n                            value={newPageTitle}\n                            onChange={(e) => setNewPageTitle(e.target.value)}\n                            placeholder=\"Enter page title\"\n                            className=\"mt-1\"\n                            data-testid=\"input-page-title\"\n                          />\n                        </div>\n                        <div className=\"flex space-x-3\">\n                          <Button\n                            onClick={handleCreatePage}\n                            disabled={!newPageTitle.trim() || createPageMutation.isPending}\n                            className=\"flex-1\"\n                            data-testid=\"button-create-page\"\n                          >\n                            {createPageMutation.isPending ? \"Creating...\" : \"Create Page\"}\n                          </Button>\n                          <Button\n                            variant=\"outline\"\n                            onClick={() => setShowAddPage(false)}\n                            className=\"flex-1\"\n                            data-testid=\"button-cancel-page\"\n                          >\n                            Cancel\n                          </Button>\n                        </div>\n                      </div>\n                    </DialogContent>\n                  </Dialog>\n                )}\n              </div>\n            </nav>\n            \n            {/* Admin Controls */}\n            <div className=\"flex items-center gap-2\">\n              {/* Admin Save Button - only shows when admin and has pending changes */}\n              {isAdmin && <AdminSaveButton />}\n              \n              {/* Admin Button */}\n              <Button\n                size=\"sm\"\n                variant=\"secondary\"\n                className=\"w-10 h-10 rounded-lg\"\n                onClick={() => {\n                  console.log('Admin button clicked!');\n                  openAdminModal();\n                }}\n                data-testid=\"button-admin\"\n              >\n                {isAdmin ? <Settings className=\"w-4 h-4\" /> : <User className=\"w-4 h-4\" />}\n              </Button>\n            </div>\n          </div>\n        </div>\n      </div>\n      \n      {/* Page Context Menu */}\n      <ContextMenu\n        x={contextMenu.x}\n        y={contextMenu.y}\n        isVisible={contextMenu.isVisible}\n        onClose={hideContextMenu}\n        options={[\n          {\n            icon: <Edit2 className=\"w-4 h-4\" />,\n            label: \"Переименовать\",\n            onClick: () => setShowEditPage(true),\n          },\n          {\n            icon: <Trash2 className=\"w-4 h-4\" />,\n            label: \"Удалить\",\n            variant: \"destructive\",\n            onClick: () => {\n              if (editingPage && confirm(`Вы уверены, что хотите удалить страницу \"${editingPage.title}\"?`)) {\n                deletePageMutation.mutate(editingPage.id);\n              }\n            },\n          },\n        ]}\n      />\n\n      {/* Edit Page Modal */}\n      <Dialog open={showEditPage} onOpenChange={setShowEditPage}>\n        <DialogContent>\n          <DialogHeader>\n            <DialogTitle>Изменить название страницы</DialogTitle>\n          </DialogHeader>\n          <div className=\"space-y-4\">\n            <div>\n              <label className=\"text-sm font-medium\">Название страницы</label>\n              <Input\n                value={editPageTitle}\n                onChange={(e) => setEditPageTitle(e.target.value)}\n                placeholder=\"Введите название страницы\"\n                className=\"mt-1\"\n                data-testid=\"input-edit-page-title\"\n              />\n            </div>\n            <div className=\"flex space-x-3\">\n              <Button\n                onClick={handleUpdatePage}\n                disabled={!editPageTitle.trim() || updatePageMutation.isPending}\n                className=\"flex-1\"\n                data-testid=\"button-update-page\"\n              >\n                {updatePageMutation.isPending ? \"Сохранение...\" : \"Сохранить\"}\n              </Button>\n              <Button\n                variant=\"outline\"\n                onClick={() => setShowEditPage(false)}\n                className=\"flex-1\"\n                data-testid=\"button-cancel-edit-page\"\n              >\n                Отмена\n              </Button>\n            </div>\n          </div>\n        </DialogContent>\n      </Dialog>\n    </header>\n  );\n}\n","size_bytes":11347},"client/src/components/MediaUploadModal.tsx":{"content":"import { useState, useRef } from \"react\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Upload, X } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface MediaUploadModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  blockId?: string;\n  onUploadComplete?: () => void;\n}\n\nexport default function MediaUploadModal({\n  isOpen,\n  onClose,\n  blockId,\n  onUploadComplete,\n}: MediaUploadModalProps) {\n  const { toast } = useToast();\n  const fileInputRef = useRef<HTMLInputElement>(null);\n  const [selectedFiles, setSelectedFiles] = useState<File[]>([]);\n  const [isUploading, setIsUploading] = useState(false);\n  const [dragActive, setDragActive] = useState(false);\n\n  const handleDrag = (e: React.DragEvent) => {\n    e.preventDefault();\n    e.stopPropagation();\n    if (e.type === \"dragenter\" || e.type === \"dragover\") {\n      setDragActive(true);\n    } else if (e.type === \"dragleave\") {\n      setDragActive(false);\n    }\n  };\n\n  const handleDrop = (e: React.DragEvent) => {\n    e.preventDefault();\n    e.stopPropagation();\n    setDragActive(false);\n\n    const files = Array.from(e.dataTransfer.files);\n    const validFiles = files.filter(file => \n      file.type.match(/^(image|video)\\//) && file.size <= 50 * 1024 * 1024\n    );\n\n    setSelectedFiles(prev => [...prev, ...validFiles]);\n  };\n\n  const handleFileSelect = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const files = Array.from(e.target.files || []);\n    const validFiles = files.filter(file => \n      file.type.match(/^(image|video)\\//) && file.size <= 50 * 1024 * 1024\n    );\n\n    setSelectedFiles(prev => [...prev, ...validFiles]);\n  };\n\n  const removeFile = (index: number) => {\n    setSelectedFiles(prev => prev.filter((_, i) => i !== index));\n  };\n\n  const handleUpload = async () => {\n    if (selectedFiles.length === 0) return;\n\n    setIsUploading(true);\n    try {\n      const uploadPromises = selectedFiles.map(async (file) => {\n        const formData = new FormData();\n        formData.append('file', file);\n        if (blockId) {\n          formData.append('blockId', blockId);\n        }\n\n        const response = await fetch('/api/upload', {\n          method: 'POST',\n          body: formData,\n          headers: {\n            'Authorization': `Bearer ${localStorage.getItem('adminToken')}`,\n          },\n        });\n\n        if (!response.ok) {\n          throw new Error(`Failed to upload ${file.name}`);\n        }\n\n        return response.json();\n      });\n\n      await Promise.all(uploadPromises);\n\n      toast({\n        title: \"Upload successful\",\n        description: `${selectedFiles.length} file(s) uploaded successfully.`,\n      });\n\n      setSelectedFiles([]);\n      onUploadComplete?.();\n      onClose();\n    } catch (error) {\n      toast({\n        title: \"Upload failed\",\n        description: \"Some files failed to upload. Please try again.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsUploading(false);\n    }\n  };\n\n  const handleClose = () => {\n    setSelectedFiles([]);\n    onClose();\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={handleClose}>\n      <DialogContent className=\"slide-in max-w-2xl\" data-testid=\"modal-media-upload\">\n        <DialogHeader>\n          <DialogTitle>Add Media</DialogTitle>\n        </DialogHeader>\n        \n        <div className=\"space-y-6\">\n          {/* Drop Zone */}\n          <div\n            className={`border-2 border-dashed rounded-lg p-8 text-center transition-colors ${\n              dragActive \n                ? 'border-primary bg-primary/5' \n                : 'border-border hover:border-primary/50'\n            }`}\n            onDragEnter={handleDrag}\n            onDragLeave={handleDrag}\n            onDragOver={handleDrag}\n            onDrop={handleDrop}\n            data-testid=\"drop-zone\"\n          >\n            <Upload className=\"w-12 h-12 mx-auto mb-4 text-muted-foreground\" />\n            <p className=\"text-muted-foreground mb-4\">\n              Drag & drop media files here or click to browse\n            </p>\n            <p className=\"text-sm text-muted-foreground mb-4\">\n              Supports images and videos up to 50MB\n            </p>\n            <Button\n              variant=\"secondary\"\n              onClick={() => fileInputRef.current?.click()}\n              data-testid=\"button-browse-files\"\n            >\n              Choose Files\n            </Button>\n            <input\n              ref={fileInputRef}\n              type=\"file\"\n              multiple\n              accept=\"image/*,video/*\"\n              onChange={handleFileSelect}\n              className=\"hidden\"\n              data-testid=\"input-file-multiple\"\n            />\n          </div>\n\n          {/* Selected Files */}\n          {selectedFiles.length > 0 && (\n            <div className=\"space-y-2\">\n              <h4 className=\"font-medium\">Selected Files ({selectedFiles.length})</h4>\n              <div className=\"max-h-40 overflow-y-auto space-y-2\">\n                {selectedFiles.map((file, index) => (\n                  <div\n                    key={index}\n                    className=\"flex items-center justify-between p-2 bg-muted rounded-lg\"\n                    data-testid={`selected-file-${index}`}\n                  >\n                    <div className=\"flex-1 min-w-0\">\n                      <p className=\"text-sm font-medium truncate\">{file.name}</p>\n                      <p className=\"text-xs text-muted-foreground\">\n                        {(file.size / 1024 / 1024).toFixed(2)} MB\n                      </p>\n                    </div>\n                    <Button\n                      size=\"sm\"\n                      variant=\"ghost\"\n                      onClick={() => removeFile(index)}\n                      data-testid={`button-remove-file-${index}`}\n                    >\n                      <X className=\"w-4 h-4\" />\n                    </Button>\n                  </div>\n                ))}\n              </div>\n            </div>\n          )}\n\n          {/* Action Buttons */}\n          <div className=\"flex justify-end space-x-3\">\n            <Button\n              variant=\"secondary\"\n              onClick={handleClose}\n              disabled={isUploading}\n              data-testid=\"button-cancel-upload\"\n            >\n              Cancel\n            </Button>\n            <Button\n              onClick={handleUpload}\n              disabled={selectedFiles.length === 0 || isUploading}\n              data-testid=\"button-upload-files\"\n            >\n              {isUploading ? \"Uploading...\" : `Upload ${selectedFiles.length} file(s)`}\n            </Button>\n          </div>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":6750},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/hooks/useAdmin.ts":{"content":"import React, { useState, useEffect, useContext, createContext } from \"react\";\n\ninterface AdminContextType {\n  isAdmin: boolean;\n  isAdminModalOpen: boolean;\n  openAdminModal: () => void;\n  closeAdminModal: () => void;\n  login: (token: string) => void;\n  logout: () => void;\n}\n\nconst AdminContext = createContext<AdminContextType | null>(null);\n\nexport function AdminProvider({ children }: { children: React.ReactNode }) {\n  const [isAdmin, setIsAdmin] = useState(false);\n  const [isAdminModalOpen, setIsAdminModalOpen] = useState(false);\n\n  useEffect(() => {\n    // Check if admin token exists in localStorage\n    const token = localStorage.getItem('adminToken');\n    if (token) {\n      setIsAdmin(true);\n    }\n  }, []);\n\n  const login = (token: string) => {\n    localStorage.setItem('adminToken', token);\n    setIsAdmin(true);\n  };\n\n  const logout = () => {\n    localStorage.removeItem('adminToken');\n    setIsAdmin(false);\n  };\n\n  const openAdminModal = () => {\n    console.log('openAdminModal called, isAdmin:', isAdmin);\n    if (!isAdmin) {\n      console.log('Setting modal open to true');\n      setIsAdminModalOpen(true);\n    } else {\n      console.log('User is already admin, not opening modal');\n    }\n  };\n\n  const closeAdminModal = () => {\n    setIsAdminModalOpen(false);\n  };\n\n  const value = {\n    isAdmin,\n    isAdminModalOpen,\n    openAdminModal,\n    closeAdminModal,\n    login,\n    logout,\n  };\n\n  return React.createElement(AdminContext.Provider, { value }, children);\n}\n\nexport function useAdmin() {\n  const context = useContext(AdminContext);\n  if (!context) {\n    throw new Error('useAdmin must be used within an AdminProvider');\n  }\n  return context;\n}\n","size_bytes":1673},"client/src/hooks/useWebSocket.ts":{"content":"import { useEffect, useRef } from \"react\";\nimport { useQueryClient } from \"@tanstack/react-query\";\nimport { useToast } from \"./use-toast\";\n\nexport function useWebSocket() {\n  const wsRef = useRef<WebSocket | null>(null);\n  const queryClient = useQueryClient();\n  const { toast } = useToast();\n  const reconnectTimeoutRef = useRef<NodeJS.Timeout>();\n  const reconnectCount = useRef(0);\n  const maxReconnectAttempts = 5;\n\n  const connect = () => {\n    const protocol = window.location.protocol === \"https:\" ? \"wss:\" : \"ws:\";\n    const wsUrl = `${protocol}//${window.location.host}/ws`;\n\n    try {\n      wsRef.current = new WebSocket(wsUrl);\n\n      wsRef.current.onopen = () => {\n        console.log(\"WebSocket connected\");\n        reconnectCount.current = 0;\n      };\n\n      wsRef.current.onmessage = (event) => {\n        try {\n          const data = JSON.parse(event.data);\n          handleWebSocketMessage(data);\n        } catch (error) {\n          console.error(\"Failed to parse WebSocket message:\", error);\n        }\n      };\n\n      wsRef.current.onclose = () => {\n        console.log(\"WebSocket disconnected\");\n        // Attempt to reconnect with exponential backoff\n        if (reconnectCount.current < maxReconnectAttempts) {\n          const delay = Math.pow(2, reconnectCount.current) * 1000;\n          reconnectTimeoutRef.current = setTimeout(() => {\n            reconnectCount.current += 1;\n            console.log(`Attempting to reconnect... (${reconnectCount.current}/${maxReconnectAttempts})`);\n            connect();\n          }, delay);\n        } else {\n          console.error('Max reconnection attempts reached');\n          toast({\n            title: \"Connection lost\",\n            description: \"Unable to reconnect to the server. Please refresh the page.\",\n            variant: \"destructive\",\n          });\n        }\n      };\n\n      wsRef.current.onerror = (error) => {\n        console.error(\"WebSocket error:\", error);\n      };\n    } catch (error) {\n      console.error(\"Failed to create WebSocket connection:\", error);\n    }\n  };\n\n  const handleWebSocketMessage = (data: any) => {\n    console.log('WebSocket message received:', data.type, data.payload);\n    \n    switch (data.type) {\n      case \"PAGE_CREATED\":\n        queryClient.invalidateQueries({ queryKey: [\"/api/pages\"] });\n        toast({\n          title: \"Page created\",\n          description: `New page \"${data.payload.title}\" has been added.`,\n        });\n        break;\n\n      case \"PAGE_UPDATED\":\n        queryClient.invalidateQueries({ queryKey: [\"/api/pages\"] });\n        toast({\n          title: \"Page updated\",\n          description: `Page \"${data.payload.title}\" has been modified.`,\n        });\n        break;\n\n      case \"PAGE_DELETED\":\n        queryClient.invalidateQueries({ queryKey: [\"/api/pages\"] });\n        toast({\n          title: \"Page deleted\",\n          description: \"A page has been removed.\",\n        });\n        break;\n\n      case \"BLOCK_CREATED\":\n        // Invalidate both the specific page blocks and general pages query\n        queryClient.invalidateQueries({ \n          queryKey: [\"/api/pages\", data.payload.pageId, \"blocks\"] \n        });\n        queryClient.invalidateQueries({ queryKey: [\"/api/pages\"] });\n        break;\n\n      case \"BLOCK_UPDATED\":\n        // Invalidate both the specific page blocks and general pages query\n        queryClient.invalidateQueries({ \n          queryKey: [\"/api/pages\", data.payload.pageId, \"blocks\"] \n        });\n        queryClient.invalidateQueries({ queryKey: [\"/api/pages\"] });\n        break;\n\n      case \"BLOCK_DELETED\":\n        // Invalidate all relevant queries when block is deleted\n        queryClient.invalidateQueries({ queryKey: [\"/api/pages\"] });\n        if (data.payload.pageId) {\n          queryClient.invalidateQueries({ \n            queryKey: [\"/api/pages\", data.payload.pageId, \"blocks\"] \n          });\n        }\n        break;\n\n      case \"MEDIA_UPLOADED\":\n      case \"MEDIA_CREATED\":\n        // Handle both event types for consistency\n        if (data.payload.blockId) {\n          queryClient.invalidateQueries({ \n            queryKey: [\"/api/blocks\", data.payload.blockId, \"media\"] \n          });\n        }\n        break;\n\n      case \"MEDIA_DELETED\":\n        if (data.payload.blockId) {\n          queryClient.invalidateQueries({ \n            queryKey: [\"/api/blocks\", data.payload.blockId, \"media\"] \n          });\n        }\n        break;\n      \n      case \"MEDIA_REORDERED\":\n        // Update media cache with new order\n        if (data.payload.blockId) {\n          queryClient.setQueryData(\n            [\"/api/blocks\", data.payload.blockId, \"media\"],\n            data.payload.media\n          );\n        }\n        break;\n\n      case \"BATCH_OPERATION\":\n        // Handle batch operations by invalidating all affected queries\n        console.log('Batch operation completed, refreshing all data');\n        queryClient.invalidateQueries({ queryKey: [\"/api/pages\"] });\n        // Invalidate all block queries for affected pages\n        if (data.payload.affectedPages) {\n          data.payload.affectedPages.forEach((pageId: string) => {\n            queryClient.invalidateQueries({ \n              queryKey: [\"/api/pages\", pageId, \"blocks\"] \n            });\n          });\n        }\n        break;\n\n      default:\n        console.log(\"Unknown WebSocket message type:\", data.type);\n    }\n  };\n\n  useEffect(() => {\n    connect();\n\n    return () => {\n      if (reconnectTimeoutRef.current) {\n        clearTimeout(reconnectTimeoutRef.current);\n      }\n      if (wsRef.current) {\n        wsRef.current.close();\n      }\n    };\n  }, []);\n\n  return {\n    isConnected: wsRef.current?.readyState === WebSocket.OPEN,\n  };\n}\n","size_bytes":5669},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const headers: Record<string, string> = {};\n  \n  if (data) {\n    headers[\"Content-Type\"] = \"application/json\";\n  }\n  \n  // Add admin token if available\n  const adminToken = localStorage.getItem('adminToken');\n  if (adminToken) {\n    headers[\"Authorization\"] = `Bearer ${adminToken}`;\n  }\n\n  const res = await fetch(url, {\n    method,\n    headers,\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1622},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/Portfolio.tsx":{"content":"import { useParams } from \"wouter\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useState, useEffect } from \"react\";\nimport Header from \"@/components/Header\";\nimport TextBlock from \"@/components/TextBlock\";\nimport RightMediaSubstrate from \"@/components/RightMediaSubstrate\";\nimport AdminAuthModal from \"@/components/AdminAuthModal\";\nimport MediaUploadModal from \"@/components/MediaUploadModal\";\nimport AdminPanel from \"@/components/AdminPanel\";\nimport { useWebSocket } from \"@/hooks/useWebSocket\";\nimport { useAdmin } from \"@/hooks/useAdmin\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Plus } from \"lucide-react\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport type { Page, Block } from \"@shared/schema\";\n\nexport default function Portfolio() {\n  const { pageSlug } = useParams();\n  const { isAdmin } = useAdmin();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [currentPageId, setCurrentPageId] = useState<string>(\"\");\n  const [showAddBlock, setShowAddBlock] = useState(false);\n  const [newBlockType, setNewBlockType] = useState<string>(\"text\");\n  const [newBlockContent, setNewBlockContent] = useState<string>(\"\");\n  const [activeMediaBlockId, setActiveMediaBlockId] = useState<string | null>(null);\n\n  // Initialize WebSocket connection\n  useWebSocket();\n\n  // Mutation for creating new block\n  const createBlockMutation = useMutation({\n    mutationFn: async (blockData: { pageId: string; type: string; content: any }) => {\n      const response = await apiRequest(\"POST\", \"/api/blocks\", blockData);\n      return response.json();\n    },\n    onSuccess: (newBlock) => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/pages\", currentPageId, \"blocks\"] });\n      setShowAddBlock(false);\n      setNewBlockType(\"text\");\n      setNewBlockContent(\"\");\n      toast({\n        title: \"Block created\",\n        description: \"New content block has been added successfully.\",\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to create block. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Fetch pages\n  const { data: pages = [], isLoading: pagesLoading } = useQuery<Page[]>({\n    queryKey: [\"/api/pages\"],\n  });\n\n  // Fetch blocks for current page\n  const { data: blocks = [], isLoading: blocksLoading } = useQuery<Block[]>({\n    queryKey: [\"/api/pages\", currentPageId, \"blocks\"],\n    enabled: !!currentPageId,\n  });\n\n  // Set current page based on slug or default to first page\n  useEffect(() => {\n    if (pages.length > 0) {\n      if (pageSlug) {\n        const page = pages.find(p => p.slug === pageSlug);\n        if (page) {\n          setCurrentPageId(page.id);\n        }\n      } else {\n        // Default to first page\n        setCurrentPageId(pages[0].id);\n      }\n    }\n  }, [pages, pageSlug]);\n\n  // Manage active media block state\n  useEffect(() => {\n    const mediaBlocks = blocks.filter(block => block.type === 'media' || block.type === 'text_media');\n    \n    if (mediaBlocks.length === 0) {\n      // No media blocks, clear active state\n      setActiveMediaBlockId(null);\n    } else if (!activeMediaBlockId || !mediaBlocks.find(block => block.id === activeMediaBlockId)) {\n      // No active block or current active block is stale, set to first available\n      setActiveMediaBlockId(mediaBlocks[0].id);\n    }\n  }, [blocks, activeMediaBlockId]);\n\n  // Reset active media block when page changes\n  useEffect(() => {\n    setActiveMediaBlockId(null);\n  }, [currentPageId]);\n\n  const currentPage = pages.find(p => p.id === currentPageId);\n\n  const handleCreateBlock = () => {\n    if (!newBlockContent.trim() || !currentPageId) return;\n    \n    const content = newBlockType === \"text\" \n      ? { text: newBlockContent.trim() }\n      : { text: newBlockContent.trim() };\n\n    createBlockMutation.mutate({\n      pageId: currentPageId,\n      type: newBlockType,\n      content,\n    });\n  };\n\n  if (pagesLoading || blocksLoading) {\n    return (\n      <div className=\"min-h-screen bg-background flex items-center justify-center\">\n        <div className=\"text-center space-y-4\">\n          <div className=\"w-12 h-12 bg-primary rounded-lg flex items-center justify-center font-bold text-2xl animate-float mx-auto\">\n            U\n          </div>\n          <p className=\"text-muted-foreground\">Loading...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background text-foreground\">\n      {/* Header */}\n      <Header pages={pages} currentPageId={currentPageId} />\n\n      {/* Main Content */}\n      <main className=\"pt-24 pb-12\">\n        <div className=\"max-w-5xl mx-auto px-6\">\n          <div className=\"space-y-8 fade-in\">\n            {blocks\n              .filter(block => block.type === 'text' || block.type === 'text_media')\n              .map((block, index) => (\n                <TextBlock\n                  key={block.id}\n                  block={block}\n                  index={index}\n                  isAdmin={isAdmin}\n                />\n              ))\n            }\n\n            {/* Add New Block Button */}\n            {isAdmin && (\n              <div className=\"text-center\">\n                <Button\n                  onClick={() => setShowAddBlock(true)}\n                  variant=\"outline\"\n                  size=\"lg\"\n                  className=\"border-dashed border-2 h-32 w-full hover:bg-muted/80 transition-all group\"\n                  data-testid=\"button-add-block\"\n                >\n                  <div className=\"text-center\">\n                    <Plus className=\"w-8 h-8 text-muted-foreground group-hover:text-foreground mb-2 mx-auto transition-colors\" />\n                    <p className=\"text-muted-foreground group-hover:text-foreground transition-colors\">\n                      Add New Block\n                    </p>\n                  </div>\n                </Button>\n              </div>\n            )}\n\n            {/* Empty state for non-admin users */}\n            {!isAdmin && blocks.length === 0 && (\n              <div className=\"text-center py-20\">\n                <div className=\"w-16 h-16 bg-muted rounded-lg flex items-center justify-center mx-auto mb-4\">\n                  <div className=\"text-2xl\">📄</div>\n                </div>\n                <h3 className=\"text-lg font-semibold mb-2\">No content yet</h3>\n                <p className=\"text-muted-foreground\">\n                  This page is empty. Content will appear here once it's added.\n                </p>\n              </div>\n            )}\n          </div>\n        </div>\n      </main>\n\n      {/* Single Right Media Substrate - shows media for active block */}\n      {activeMediaBlockId && (() => {\n        const mediaBlocks = blocks.filter(block => block.type === 'media' || block.type === 'text_media');\n        const activeBlock = blocks.find(block => block.id === activeMediaBlockId);\n        return activeBlock ? (\n          <RightMediaSubstrate\n            key={`media-${activeBlock.id}`}\n            block={activeBlock}\n            index={blocks.indexOf(activeBlock)}\n            isAdmin={isAdmin}\n            allMediaBlocks={mediaBlocks}\n            onBlockChange={setActiveMediaBlockId}\n          />\n        ) : null;\n      })()}\n\n      {/* Admin Components */}\n      <AdminAuthModal />\n      <MediaUploadModal isOpen={false} onClose={() => {}} />\n      {isAdmin && <AdminPanel />}\n\n      {/* Add Block Modal */}\n      <Dialog open={showAddBlock} onOpenChange={setShowAddBlock}>\n        <DialogContent className=\"slide-in\" data-testid=\"modal-add-block\">\n          <DialogHeader>\n            <DialogTitle>Add New Content Block</DialogTitle>\n          </DialogHeader>\n          <div className=\"space-y-4\">\n            <div>\n              <label className=\"text-sm font-medium mb-2 block\">Block Type</label>\n              <Select value={newBlockType} onValueChange={setNewBlockType} data-testid=\"select-block-type\">\n                <SelectTrigger>\n                  <SelectValue placeholder=\"Select block type\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"text\">Text Block</SelectItem>\n                  <SelectItem value=\"media\">Media Block</SelectItem>\n                  <SelectItem value=\"text_media\">Text + Media Block</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n            <div>\n              <label className=\"text-sm font-medium mb-2 block\">Content</label>\n              <Textarea\n                value={newBlockContent}\n                onChange={(e) => setNewBlockContent(e.target.value)}\n                placeholder=\"Enter your content here...\"\n                className=\"min-h-[100px]\"\n                data-testid=\"textarea-block-content\"\n              />\n            </div>\n            <div className=\"flex space-x-3\">\n              <Button\n                onClick={handleCreateBlock}\n                disabled={!newBlockContent.trim() || createBlockMutation.isPending}\n                className=\"flex-1\"\n                data-testid=\"button-create-block\"\n              >\n                {createBlockMutation.isPending ? \"Creating...\" : \"Create Block\"}\n              </Button>\n              <Button\n                variant=\"outline\"\n                onClick={() => setShowAddBlock(false)}\n                className=\"flex-1\"\n                data-testid=\"button-cancel-block\"\n              >\n                Cancel\n              </Button>\n            </div>\n          </div>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}\n","size_bytes":9923},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/components/ContextMenu.tsx":{"content":"import { useState, useEffect, ReactNode } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Edit2, Copy, Trash2, FileText } from \"lucide-react\";\n\ninterface ContextMenuOption {\n  icon?: ReactNode;\n  label: string;\n  onClick: () => void;\n  variant?: \"default\" | \"destructive\";\n}\n\ninterface ContextMenuProps {\n  x: number;\n  y: number;\n  onClose: () => void;\n  options: ContextMenuOption[];\n  isVisible: boolean;\n}\n\nexport default function ContextMenu({ x, y, onClose, options, isVisible }: ContextMenuProps) {\n  useEffect(() => {\n    if (!isVisible) return;\n\n    const handleClickOutside = () => onClose();\n    const handleEscape = (e: KeyboardEvent) => {\n      if (e.key === 'Escape') onClose();\n    };\n\n    document.addEventListener('click', handleClickOutside);\n    document.addEventListener('keydown', handleEscape);\n    document.addEventListener('contextmenu', handleClickOutside);\n\n    return () => {\n      document.removeEventListener('click', handleClickOutside);\n      document.removeEventListener('keydown', handleEscape);\n      document.removeEventListener('contextmenu', handleClickOutside);\n    };\n  }, [isVisible, onClose]);\n\n  if (!isVisible) return null;\n\n  const menuStyle = {\n    position: 'fixed' as const,\n    left: Math.min(x, window.innerWidth - 200),\n    top: Math.min(y, window.innerHeight - options.length * 44),\n    zIndex: 9999,\n  };\n\n  return (\n    <div \n      className=\"context-menu-backdrop fixed inset-0 z-[9998]\"\n      onClick={(e) => {\n        e.preventDefault();\n        e.stopPropagation();\n      }}\n    >\n      <div\n        style={menuStyle}\n        className=\"bg-popover border border-border rounded-lg shadow-lg py-2 min-w-[180px] animate-in fade-in-0 zoom-in-95 slide-in-from-top-2 duration-200\"\n        onClick={(e) => {\n          e.preventDefault();\n          e.stopPropagation();\n        }}\n        data-testid=\"context-menu\"\n      >\n        {options.map((option, index) => (\n          <button\n            key={index}\n            className={`w-full px-3 py-2 text-left text-sm hover:bg-accent hover:text-accent-foreground transition-colors flex items-center gap-2 ${\n              option.variant === 'destructive' ? 'text-destructive hover:bg-destructive hover:text-destructive-foreground' : ''\n            }`}\n            onClick={(e) => {\n              e.preventDefault();\n              e.stopPropagation();\n              option.onClick();\n              onClose();\n            }}\n            data-testid={`context-menu-option-${index}`}\n          >\n            {option.icon}\n            {option.label}\n          </button>\n        ))}\n      </div>\n    </div>\n  );\n}\n\n// Hook for managing context menu state\nexport function useContextMenu() {\n  const [contextMenu, setContextMenu] = useState<{\n    x: number;\n    y: number;\n    isVisible: boolean;\n  }>({\n    x: 0,\n    y: 0,\n    isVisible: false,\n  });\n\n  const showContextMenu = (e: React.MouseEvent) => {\n    e.preventDefault();\n    e.stopPropagation();\n    \n    setContextMenu({\n      x: e.clientX,\n      y: e.clientY,\n      isVisible: true,\n    });\n  };\n\n  const hideContextMenu = () => {\n    setContextMenu(prev => ({\n      ...prev,\n      isVisible: false,\n    }));\n  };\n\n  return {\n    contextMenu,\n    showContextMenu,\n    hideContextMenu,\n  };\n}","size_bytes":3266},"client/src/components/PendingChangesIndicator.tsx":{"content":"import React from 'react';\nimport { useEditSession } from '@/contexts/EditSessionContext';\nimport { Badge } from '@/components/ui/badge';\nimport { Button } from '@/components/ui/button';\nimport { Clock, RotateCcw } from 'lucide-react';\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipTrigger,\n} from '@/components/ui/tooltip';\n\ninterface PendingChangesIndicatorProps {\n  itemId: string;\n  itemType: string;\n  showRevertButton?: boolean;\n  className?: string;\n}\n\nexport function PendingChangesIndicator({ \n  itemId, \n  itemType, \n  showRevertButton = false,\n  className = '' \n}: PendingChangesIndicatorProps) {\n  const editSession = useEditSession();\n  \n  const pendingOperation = editSession.getPendingChangesForItem(itemId, itemType);\n  const hasPending = editSession.hasPendingChanges(itemId, itemType);\n\n  if (!hasPending || !pendingOperation) {\n    return null;\n  }\n\n  const handleRevert = () => {\n    editSession.revertOperation(itemId);\n  };\n\n  return (\n    <div className={`flex items-center gap-2 ${className}`}>\n      <Tooltip>\n        <TooltipTrigger asChild>\n          <Badge variant=\"outline\" className=\"bg-yellow-50 border-yellow-200 text-yellow-800 flex items-center gap-1\">\n            <Clock className=\"h-3 w-3\" />\n            Pending\n          </Badge>\n        </TooltipTrigger>\n        <TooltipContent>\n          <p>Unsaved changes - will be committed on save</p>\n          <p className=\"text-xs text-muted-foreground\">\n            Modified: {new Date(pendingOperation.timestamp).toLocaleTimeString()}\n          </p>\n        </TooltipContent>\n      </Tooltip>\n      \n      {showRevertButton && (\n        <Tooltip>\n          <TooltipTrigger asChild>\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={handleRevert}\n              className=\"h-6 w-6 p-0 text-muted-foreground hover:text-foreground\"\n            >\n              <RotateCcw className=\"h-3 w-3\" />\n            </Button>\n          </TooltipTrigger>\n          <TooltipContent>\n            <p>Revert changes</p>\n          </TooltipContent>\n        </Tooltip>\n      )}\n    </div>\n  );\n}\n\n/**\n * Component to show overall dirty state and pending operation count\n */\nexport function EditSessionStatus({ className = '' }: { className?: string }) {\n  const editSession = useEditSession();\n  const { isDirty, pendingOperations, isCommitting } = editSession.state;\n\n  if (!isDirty && !isCommitting) {\n    return null;\n  }\n\n  return (\n    <div className={`flex items-center gap-2 ${className}`}>\n      {isCommitting ? (\n        <Badge variant=\"outline\" className=\"bg-blue-50 border-blue-200 text-blue-800\">\n          Saving...\n        </Badge>\n      ) : (\n        <Tooltip>\n          <TooltipTrigger asChild>\n            <Badge variant=\"outline\" className=\"bg-orange-50 border-orange-200 text-orange-800\">\n              {pendingOperations.length} unsaved change{pendingOperations.length !== 1 ? 's' : ''}\n            </Badge>\n          </TooltipTrigger>\n          <TooltipContent>\n            <div className=\"space-y-1\">\n              <p>Pending operations:</p>\n              {pendingOperations.slice(0, 5).map((op, index) => (\n                <p key={index} className=\"text-xs text-muted-foreground\">\n                  • {op.type.replace('_', ' ').replace(/\\b\\w/g, l => l.toUpperCase())}\n                </p>\n              ))}\n              {pendingOperations.length > 5 && (\n                <p className=\"text-xs text-muted-foreground\">\n                  ...and {pendingOperations.length - 5} more\n                </p>\n              )}\n            </div>\n          </TooltipContent>\n        </Tooltip>\n      )}\n    </div>\n  );\n}","size_bytes":3644},"client/src/contexts/EditSessionContext.tsx":{"content":"import React, { createContext, useContext, useReducer, ReactNode } from 'react';\n\n// Types for pending operations\nexport type PendingOperation = {\n  id: string;\n  type: 'page_create' | 'page_update' | 'page_delete' | 'block_create' | 'block_update' | 'block_delete' | 'media_create' | 'media_delete';\n  data?: any;\n  originalData?: any; // Store original data for reverting changes\n  timestamp: string;\n};\n\nexport type EditSessionState = {\n  pendingOperations: PendingOperation[];\n  isDirty: boolean;\n  isCommitting: boolean;\n};\n\ntype EditSessionAction =\n  | { type: 'ADD_OPERATION'; payload: PendingOperation }\n  | { type: 'REMOVE_OPERATION'; payload: string } // Remove by operation id\n  | { type: 'UPDATE_OPERATION'; payload: { id: string; data: any } }\n  | { type: 'CLEAR_ALL' }\n  | { type: 'SET_COMMITTING'; payload: boolean }\n  | { type: 'REVERT_OPERATION'; payload: string }; // Revert operation by id\n\nconst initialState: EditSessionState = {\n  pendingOperations: [],\n  isDirty: false,\n  isCommitting: false,\n};\n\nfunction editSessionReducer(state: EditSessionState, action: EditSessionAction): EditSessionState {\n  switch (action.type) {\n    case 'ADD_OPERATION': {\n      const existingIndex = state.pendingOperations.findIndex(op => \n        op.id === action.payload.id && op.type === action.payload.type\n      );\n      \n      let newOperations;\n      if (existingIndex !== -1) {\n        // Update existing operation\n        newOperations = [...state.pendingOperations];\n        newOperations[existingIndex] = action.payload;\n      } else {\n        // Add new operation\n        newOperations = [...state.pendingOperations, action.payload];\n      }\n      \n      return {\n        ...state,\n        pendingOperations: newOperations,\n        isDirty: newOperations.length > 0,\n      };\n    }\n    \n    case 'REMOVE_OPERATION': {\n      const newOperations = state.pendingOperations.filter(op => op.id !== action.payload);\n      return {\n        ...state,\n        pendingOperations: newOperations,\n        isDirty: newOperations.length > 0,\n      };\n    }\n    \n    case 'UPDATE_OPERATION': {\n      const newOperations = state.pendingOperations.map(op =>\n        op.id === action.payload.id\n          ? { ...op, data: action.payload.data, timestamp: new Date().toISOString() }\n          : op\n      );\n      return {\n        ...state,\n        pendingOperations: newOperations,\n        isDirty: newOperations.length > 0,\n      };\n    }\n    \n    case 'CLEAR_ALL': {\n      return {\n        ...state,\n        pendingOperations: [],\n        isDirty: false,\n        isCommitting: false,\n      };\n    }\n    \n    case 'SET_COMMITTING': {\n      return {\n        ...state,\n        isCommitting: action.payload,\n      };\n    }\n    \n    case 'REVERT_OPERATION': {\n      const newOperations = state.pendingOperations.filter(op => op.id !== action.payload);\n      return {\n        ...state,\n        pendingOperations: newOperations,\n        isDirty: newOperations.length > 0,\n      };\n    }\n    \n    default:\n      return state;\n  }\n}\n\ntype EditSessionContextType = {\n  state: EditSessionState;\n  addOperation: (operation: Omit<PendingOperation, 'timestamp'>) => void;\n  removeOperation: (id: string) => void;\n  updateOperation: (id: string, data: any) => void;\n  revertOperation: (id: string) => void;\n  clearAll: () => void;\n  setCommitting: (committing: boolean) => void;\n  getPendingChangesForItem: (itemId: string, itemType: string) => PendingOperation | undefined;\n  hasPendingChanges: (itemId: string, itemType: string) => boolean;\n  getPendingOperations: () => PendingOperation[];\n};\n\nconst EditSessionContext = createContext<EditSessionContextType | null>(null);\n\nexport function EditSessionProvider({ children }: { children: ReactNode }) {\n  const [state, dispatch] = useReducer(editSessionReducer, initialState);\n\n  const addOperation = (operation: Omit<PendingOperation, 'timestamp'>) => {\n    dispatch({\n      type: 'ADD_OPERATION',\n      payload: {\n        ...operation,\n        timestamp: new Date().toISOString(),\n      },\n    });\n  };\n\n  const removeOperation = (id: string) => {\n    dispatch({ type: 'REMOVE_OPERATION', payload: id });\n  };\n\n  const updateOperation = (id: string, data: any) => {\n    dispatch({ type: 'UPDATE_OPERATION', payload: { id, data } });\n  };\n\n  const revertOperation = (id: string) => {\n    dispatch({ type: 'REVERT_OPERATION', payload: id });\n  };\n\n  const clearAll = () => {\n    dispatch({ type: 'CLEAR_ALL' });\n  };\n\n  const setCommitting = (committing: boolean) => {\n    dispatch({ type: 'SET_COMMITTING', payload: committing });\n  };\n\n  const getPendingChangesForItem = (itemId: string, itemType: string): PendingOperation | undefined => {\n    return state.pendingOperations.find(op => \n      op.id === itemId && op.type.includes(itemType)\n    );\n  };\n\n  const hasPendingChanges = (itemId: string, itemType: string): boolean => {\n    return state.pendingOperations.some(op => \n      op.id === itemId && op.type.includes(itemType)\n    );\n  };\n\n  const getPendingOperations = (): PendingOperation[] => {\n    return state.pendingOperations;\n  };\n\n  const value: EditSessionContextType = {\n    state,\n    addOperation,\n    removeOperation,\n    updateOperation,\n    revertOperation,\n    clearAll,\n    setCommitting,\n    getPendingChangesForItem,\n    hasPendingChanges,\n    getPendingOperations,\n  };\n\n  return (\n    <EditSessionContext.Provider value={value}>\n      {children}\n    </EditSessionContext.Provider>\n  );\n}\n\nexport function useEditSession() {\n  const context = useContext(EditSessionContext);\n  if (!context) {\n    throw new Error('useEditSession must be used within an EditSessionProvider');\n  }\n  return context;\n}\n\n// Helper function to create batch operations from pending operations\nexport function createBatchOperationsFromPending(pendingOps: PendingOperation[]) {\n  return pendingOps.map(op => ({\n    type: op.type,\n    id: op.id,\n    data: op.data,\n  }));\n}","size_bytes":5908},"client/src/hooks/useEditSessionForm.ts":{"content":"import { useState, useEffect } from 'react';\nimport { useEditSession } from '@/contexts/EditSessionContext';\n\n/**\n * Hook for managing form state with the edit session provider\n * Tracks changes and updates pending operations automatically\n */\nexport function useEditSessionForm<T extends Record<string, any>>(\n  itemId: string,\n  itemType: 'page' | 'block' | 'media',\n  initialData: T,\n  operationType: 'create' | 'update' = 'update'\n) {\n  const editSession = useEditSession();\n  \n  // Check if there are pending changes for this item\n  const pendingOperation = editSession.getPendingChangesForItem(itemId, itemType);\n  \n  // Initialize form data with pending changes or original data\n  const [formData, setFormData] = useState<T>(() => {\n    if (pendingOperation && pendingOperation.data) {\n      return { ...initialData, ...pendingOperation.data };\n    }\n    return initialData;\n  });\n\n  // Track if form has been modified from initial state\n  const [isModified, setIsModified] = useState(false);\n\n  // Update form data when initial data changes (e.g., fresh API data)\n  useEffect(() => {\n    if (!pendingOperation) {\n      setFormData(initialData);\n      setIsModified(false);\n    }\n  }, [initialData, pendingOperation]);\n\n  // Function to update form data and track pending changes\n  const updateFormData = (updates: Partial<T>) => {\n    const newFormData = { ...formData, ...updates };\n    setFormData(newFormData);\n    setIsModified(true);\n\n    // Update or add pending operation\n    const operationTypeWithAction = `${itemType}_${operationType}` as any;\n    \n    editSession.addOperation({\n      id: itemId,\n      type: operationTypeWithAction,\n      data: newFormData,\n      originalData: initialData,\n    });\n  };\n\n  // Function to revert changes\n  const revertChanges = () => {\n    setFormData(initialData);\n    setIsModified(false);\n    editSession.removeOperation(itemId);\n  };\n\n  // Function to discard pending changes\n  const discardChanges = () => {\n    editSession.removeOperation(itemId);\n    setFormData(initialData);\n    setIsModified(false);\n  };\n\n  // Function to check if current form has unsaved changes\n  const hasUnsavedChanges = () => {\n    return editSession.hasPendingChanges(itemId, itemType) || isModified;\n  };\n\n  return {\n    formData,\n    setFormData,\n    updateFormData,\n    revertChanges,\n    discardChanges,\n    hasUnsavedChanges,\n    isModified,\n    hasPendingChanges: editSession.hasPendingChanges(itemId, itemType),\n    pendingOperation,\n  };\n}\n\n/**\n * Hook for creating new items with edit session tracking\n */\nexport function useEditSessionCreate<T extends Record<string, any>>(\n  itemType: 'page' | 'block' | 'media',\n  initialData: T\n) {\n  const editSession = useEditSession();\n  const [formData, setFormData] = useState<T>(initialData);\n  const [tempId] = useState(() => `temp_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`);\n\n  const updateFormData = (updates: Partial<T>) => {\n    const newFormData = { ...formData, ...updates };\n    setFormData(newFormData);\n\n    const operationTypeWithAction = `${itemType}_create` as any;\n    \n    editSession.addOperation({\n      id: tempId,\n      type: operationTypeWithAction,\n      data: newFormData,\n      originalData: initialData,\n    });\n  };\n\n  const discardCreate = () => {\n    editSession.removeOperation(tempId);\n    setFormData(initialData);\n  };\n\n  return {\n    tempId,\n    formData,\n    setFormData,\n    updateFormData,\n    discardCreate,\n    hasPendingChanges: editSession.hasPendingChanges(tempId, itemType),\n  };\n}","size_bytes":3527},"client/src/components/AdminSaveButton.tsx":{"content":"import React from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Save, Loader2 } from 'lucide-react';\nimport { useMutation, useQueryClient } from '@tanstack/react-query';\nimport { useEditSession, createBatchOperationsFromPending } from '@/contexts/EditSessionContext';\nimport { useToast } from '@/hooks/use-toast';\nimport { apiRequest } from '@/lib/queryClient';\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipTrigger,\n} from '@/components/ui/tooltip';\n\nexport function AdminSaveButton() {\n  const editSession = useEditSession();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  \n  const { state } = editSession;\n  const { isDirty, pendingOperations, isCommitting } = state;\n\n  // Mutation for batch save operation\n  const saveAllMutation = useMutation({\n    mutationFn: async (operations: any[]) => {\n      const response = await apiRequest('POST', '/api/batch', { operations });\n      return response.json();\n    },\n    onMutate: () => {\n      // Set committing state\n      editSession.setCommitting(true);\n    },\n    onSuccess: (result) => {\n      // Clear all pending operations\n      editSession.clearAll();\n      \n      // Invalidate all relevant queries to refresh data\n      queryClient.invalidateQueries({ queryKey: ['/api/pages'] });\n      \n      // Success toast\n      toast({\n        title: 'Changes saved',\n        description: `Successfully saved ${result.results?.length || pendingOperations.length} changes.`,\n      });\n    },\n    onError: (error: any) => {\n      // Reset committing state\n      editSession.setCommitting(false);\n      \n      // Error toast\n      toast({\n        title: 'Save failed',\n        description: error.message || 'Failed to save changes. Please try again.',\n        variant: 'destructive',\n      });\n    },\n    onSettled: () => {\n      // Always reset committing state on completion\n      editSession.setCommitting(false);\n    },\n  });\n\n  // Handler for save button click\n  const handleSave = () => {\n    if (!isDirty || isCommitting || pendingOperations.length === 0) {\n      return;\n    }\n\n    // Convert pending operations to batch format\n    const batchOperations = createBatchOperationsFromPending(pendingOperations);\n    \n    // Execute save mutation\n    saveAllMutation.mutate(batchOperations);\n  };\n\n  // Don't render if no pending changes\n  if (!isDirty || pendingOperations.length === 0) {\n    return null;\n  }\n\n  return (\n    <Tooltip>\n      <TooltipTrigger asChild>\n        <Button\n          size=\"sm\"\n          variant=\"default\"\n          className=\"w-auto h-10 px-3 rounded-lg bg-primary hover:bg-primary/90 text-primary-foreground font-medium\"\n          onClick={handleSave}\n          disabled={isCommitting || saveAllMutation.isPending}\n          data-testid=\"button-admin-save\"\n        >\n          {isCommitting || saveAllMutation.isPending ? (\n            <>\n              <Loader2 className=\"w-4 h-4 mr-2 animate-spin\" />\n              Saving...\n            </>\n          ) : (\n            <>\n              <Save className=\"w-4 h-4 mr-2\" />\n              Save ({pendingOperations.length})\n            </>\n          )}\n        </Button>\n      </TooltipTrigger>\n      <TooltipContent>\n        <div className=\"space-y-1\">\n          <p>Save all pending changes</p>\n          <p className=\"text-xs text-muted-foreground\">\n            {pendingOperations.length} operation{pendingOperations.length !== 1 ? 's' : ''} pending\n          </p>\n        </div>\n      </TooltipContent>\n    </Tooltip>\n  );\n}\n\nexport default AdminSaveButton;","size_bytes":3532},"client/src/components/RightMediaSubstrate.tsx":{"content":"import React, { useState, useRef } from \"react\";\nimport { useAdmin } from \"@/hooks/useAdmin\";\nimport { useMutation, useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Button } from \"@/components/ui/button\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Plus, Trash2, Move, RotateCcw, ChevronLeft, ChevronRight } from \"lucide-react\";\nimport { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle } from \"@/components/ui/alert-dialog\";\nimport ContextMenu, { useContextMenu } from \"@/components/ContextMenu\";\nimport { PendingChangesIndicator } from \"@/components/PendingChangesIndicator\";\nimport type { Block, Media } from \"@shared/schema\";\nimport { motion, Reorder } from \"framer-motion\";\n\ninterface RightMediaSubstrateProps {\n  block: Block;\n  index: number;\n  isAdmin: boolean;\n  allMediaBlocks?: Block[];\n  onBlockChange?: (blockId: string) => void;\n}\n\nexport default function RightMediaSubstrate({ block, index, isAdmin, allMediaBlocks = [], onBlockChange }: RightMediaSubstrateProps) {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const fileInputRef = useRef<HTMLInputElement>(null);\n  const [showDeleteDialog, setShowDeleteDialog] = useState(false);\n  const [mediaToDelete, setMediaToDelete] = useState<Media | null>(null);\n  const [draggedMediaId, setDraggedMediaId] = useState<string | null>(null);\n  const [mediaOrder, setMediaOrder] = useState<Media[]>([]);\n  const { contextMenu, showContextMenu, hideContextMenu } = useContextMenu();\n\n  // Fetch media for this block\n  const { data: media = [] } = useQuery<Media[]>({\n    queryKey: [\"/api/blocks\", block.id, \"media\"],\n    onSuccess: (data) => {\n      // Update local media order state when data changes\n      setMediaOrder(data);\n    },\n  });\n\n  // Update media order when media data changes\n  React.useEffect(() => {\n    setMediaOrder(media);\n  }, [media]);\n\n  const uploadMediaMutation = useMutation({\n    mutationFn: async (file: File) => {\n      const formData = new FormData();\n      formData.append('file', file);\n      formData.append('blockId', block.id);\n      \n      const response = await fetch('/api/upload', {\n        method: 'POST',\n        body: formData,\n        headers: {\n          'Authorization': `Bearer ${localStorage.getItem('adminToken')}`,\n        },\n      });\n      \n      if (!response.ok) {\n        throw new Error('Upload failed');\n      }\n      \n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/blocks\", block.id, \"media\"] });\n      toast({\n        title: \"Media uploaded\",\n        description: \"Your file has been uploaded successfully.\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Upload failed\",\n        description: \"Failed to upload media. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteMediaMutation = useMutation({\n    mutationFn: async (mediaId: string) => {\n      await apiRequest(\"DELETE\", `/api/media/${mediaId}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/blocks\", block.id, \"media\"] });\n      toast({\n        title: \"Media deleted\",\n        description: \"The media has been removed successfully.\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to delete media. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const reorderMediaMutation = useMutation({\n    mutationFn: async (newMediaOrder: Media[]) => {\n      const mediaOrderUpdates = newMediaOrder.map((mediaItem, index) => ({\n        id: mediaItem.id,\n        order: index,\n      }));\n      \n      return await apiRequest(\"PATCH\", `/api/blocks/${block.id}/media/reorder`, {\n        mediaOrderUpdates,\n      });\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Media reordered\",\n        description: \"Media order has been updated successfully.\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to reorder media. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleFileUpload = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const file = event.target.files?.[0];\n    if (file) {\n      uploadMediaMutation.mutate(file);\n    }\n  };\n\n  const handleDeleteMedia = (media: Media) => {\n    setMediaToDelete(media);\n    setShowDeleteDialog(true);\n  };\n\n  const confirmDeleteMedia = () => {\n    if (mediaToDelete) {\n      deleteMediaMutation.mutate(mediaToDelete.id);\n      setMediaToDelete(null);\n      setShowDeleteDialog(false);\n    }\n  };\n\n  const handleMediaDragStart = (e: React.DragEvent, mediaId: string) => {\n    setDraggedMediaId(mediaId);\n    e.dataTransfer.setData('text/plain', mediaId);\n    e.dataTransfer.effectAllowed = 'move';\n  };\n\n  const handleMediaDragEnd = () => {\n    setDraggedMediaId(null);\n  };\n\n  const handleMediaDrop = (e: React.DragEvent) => {\n    e.preventDefault();\n    // Future implementation for media reordering\n  };\n\n  const handleMediaDragOver = (e: React.DragEvent) => {\n    e.preventDefault();\n    e.dataTransfer.dropEffect = 'move';\n  };\n\n  const handleMediaContextMenu = (e: React.MouseEvent, media: Media) => {\n    if (isAdmin) {\n      showContextMenu(e);\n      setMediaToDelete(media);\n    }\n  };\n\n  const handleReorder = (newOrder: Media[]) => {\n    setMediaOrder(newOrder);\n    if (isAdmin) {\n      reorderMediaMutation.mutate(newOrder);\n    }\n  };\n\n  // Navigation between media blocks\n  const currentBlockIndex = allMediaBlocks.findIndex(b => b.id === block.id);\n  const isValidIndex = currentBlockIndex >= 0;\n  const hasPrevious = isValidIndex && currentBlockIndex > 0;\n  const hasNext = isValidIndex && currentBlockIndex < allMediaBlocks.length - 1;\n\n  const handlePreviousBlock = () => {\n    if (hasPrevious && onBlockChange) {\n      onBlockChange(allMediaBlocks[currentBlockIndex - 1].id);\n    }\n  };\n\n  const handleNextBlock = () => {\n    if (hasNext && onBlockChange) {\n      onBlockChange(allMediaBlocks[currentBlockIndex + 1].id);\n    }\n  };\n\n  const renderMediaItem = (item: Media) => {\n    const isDragging = draggedMediaId === item.id;\n    \n    return (\n      <div \n        key={item.id} \n        className={`relative group bg-card rounded-lg p-4 border hover-lift ${isDragging ? 'opacity-50' : ''}`}\n        draggable={isAdmin}\n        onDragStart={(e) => handleMediaDragStart(e, item.id)}\n        onDragEnd={handleMediaDragEnd}\n        onDrop={handleMediaDrop}\n        onDragOver={handleMediaDragOver}\n        onContextMenu={(e) => handleMediaContextMenu(e, item)}\n        data-testid={`media-item-${item.id}`}\n      >\n        {/* Media Content */}\n        <div className=\"media-content\">\n          {item.mimetype.startsWith('image/') ? (\n            <img\n              src={item.url}\n              alt={item.originalName}\n              className=\"rounded-lg max-w-full h-auto max-h-64 object-cover\"\n              data-testid={`img-media-${item.id}`}\n            />\n          ) : item.mimetype.startsWith('video/') ? (\n            <video\n              src={item.url}\n              controls\n              className=\"rounded-lg max-w-full h-auto max-h-64\"\n              data-testid={`video-media-${item.id}`}\n            >\n              Your browser does not support the video tag.\n            </video>\n          ) : (\n            <div className=\"p-4 bg-muted rounded-lg\">\n              <p className=\"text-sm font-medium\">{item.originalName}</p>\n              <p className=\"text-xs text-muted-foreground\">{item.mimetype}</p>\n            </div>\n          )}\n        </div>\n\n        {/* Media Controls (Admin Only) */}\n        {isAdmin && (\n          <div className=\"absolute -top-2 -right-2 flex items-center gap-1 opacity-0 group-hover:opacity-100 transition-opacity\">\n            <Button\n              size=\"sm\"\n              variant=\"secondary\"\n              className=\"w-6 h-6 p-0\"\n              title=\"Drag to reorder\"\n              data-testid={`button-move-media-${item.id}`}\n            >\n              <Move className=\"w-3 h-3\" />\n            </Button>\n            <Button\n              size=\"sm\"\n              variant=\"destructive\"\n              className=\"w-6 h-6 p-0\"\n              onClick={() => handleDeleteMedia(item)}\n              title=\"Delete media\"\n              data-testid={`button-delete-media-${item.id}`}\n            >\n              <Trash2 className=\"w-3 h-3\" />\n            </Button>\n          </div>\n        )}\n\n        {/* File name overlay */}\n        <div className=\"absolute bottom-2 left-2 right-2\">\n          <div className=\"bg-black/70 text-white text-xs px-2 py-1 rounded truncate\">\n            {item.originalName}\n          </div>\n        </div>\n      </div>\n    );\n  };\n\n  // Always render substrate when there are media blocks available for navigation\n  // The component will show empty state if no media, but navigation remains accessible\n\n  return (\n    <div \n      className=\"fixed right-6 top-24 bottom-6 w-80 z-20 media-substrate\"\n      data-testid={`media-substrate-${block.id}`}\n    >\n      <div className=\"h-full bg-card/95 backdrop-blur-sm rounded-lg border shadow-lg overflow-hidden\">\n        {/* Header */}\n        <div className=\"p-4 border-b bg-card/50\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center gap-2\">\n              <h3 className=\"font-medium text-sm\">Media Gallery</h3>\n              {allMediaBlocks.length > 1 && isValidIndex && (\n                <div className=\"flex items-center gap-1\">\n                  <Button\n                    size=\"sm\"\n                    variant=\"ghost\"\n                    className=\"w-6 h-6 p-0\"\n                    onClick={handlePreviousBlock}\n                    disabled={!hasPrevious}\n                    title=\"Previous block\"\n                    data-testid=\"button-previous-media-block\"\n                  >\n                    <ChevronLeft className=\"w-3 h-3\" />\n                  </Button>\n                  <span className=\"text-xs text-muted-foreground\">\n                    {currentBlockIndex + 1}/{allMediaBlocks.length}\n                  </span>\n                  <Button\n                    size=\"sm\"\n                    variant=\"ghost\"\n                    className=\"w-6 h-6 p-0\"\n                    onClick={handleNextBlock}\n                    disabled={!hasNext}\n                    title=\"Next block\"\n                    data-testid=\"button-next-media-block\"\n                  >\n                    <ChevronRight className=\"w-3 h-3\" />\n                  </Button>\n                </div>\n              )}\n            </div>\n            <div className=\"flex items-center gap-2\">\n              <PendingChangesIndicator\n                itemId={block.id}\n                itemType=\"block\"\n                className=\"scale-75\"\n              />\n              {isAdmin && (\n                <Button\n                  size=\"sm\"\n                  variant=\"secondary\"\n                  className=\"w-8 h-8 p-0\"\n                  onClick={() => fileInputRef.current?.click()}\n                  disabled={uploadMediaMutation.isPending}\n                  title=\"Add media\"\n                  data-testid=\"button-add-media\"\n                >\n                  <Plus className=\"w-4 h-4\" />\n                </Button>\n              )}\n            </div>\n          </div>\n        </div>\n\n        {/* Media Grid */}\n        <div className=\"flex-1 overflow-y-auto p-4\">\n          {media.length > 0 ? (\n            <div className=\"space-y-4\">\n              {media.map(renderMediaItem)}\n            </div>\n          ) : (\n            <div className=\"flex flex-col items-center justify-center h-32 text-center\">\n              <div className=\"text-muted-foreground text-sm\">\n                No media files\n              </div>\n              {isAdmin && (\n                <Button\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  className=\"mt-2\"\n                  onClick={() => fileInputRef.current?.click()}\n                  disabled={uploadMediaMutation.isPending}\n                >\n                  <Plus className=\"w-4 h-4 mr-2\" />\n                  Add first media\n                </Button>\n              )}\n            </div>\n          )}\n        </div>\n\n        {/* Hidden file input */}\n        <input\n          ref={fileInputRef}\n          type=\"file\"\n          accept=\"image/*,video/*\"\n          onChange={handleFileUpload}\n          className=\"hidden\"\n          data-testid=\"input-file-upload\"\n        />\n      </div>\n\n      {/* Delete Media Confirmation Dialog */}\n      <AlertDialog open={showDeleteDialog} onOpenChange={setShowDeleteDialog}>\n        <AlertDialogContent>\n          <AlertDialogHeader>\n            <AlertDialogTitle>Delete Media</AlertDialogTitle>\n            <AlertDialogDescription>\n              Are you sure you want to delete \"{mediaToDelete?.originalName}\"? This action cannot be undone.\n            </AlertDialogDescription>\n          </AlertDialogHeader>\n          <AlertDialogFooter>\n            <AlertDialogCancel data-testid=\"button-cancel-delete-media\">Cancel</AlertDialogCancel>\n            <AlertDialogAction\n              onClick={confirmDeleteMedia}\n              className=\"bg-destructive hover:bg-destructive/90\"\n              data-testid=\"button-confirm-delete-media\"\n            >\n              Delete\n            </AlertDialogAction>\n          </AlertDialogFooter>\n        </AlertDialogContent>\n      </AlertDialog>\n\n      {/* Media Context Menu */}\n      <ContextMenu\n        x={contextMenu.x}\n        y={contextMenu.y}\n        isVisible={contextMenu.isVisible}\n        onClose={hideContextMenu}\n        options={[\n          {\n            icon: <Trash2 className=\"w-4 h-4\" />,\n            label: \"Delete media\",\n            variant: \"destructive\",\n            onClick: () => {\n              if (mediaToDelete) {\n                setShowDeleteDialog(true);\n              }\n            },\n          },\n        ]}\n      />\n    </div>\n  );\n}","size_bytes":14143},"client/src/components/TextBlock.tsx":{"content":"import { useState } from \"react\";\nimport { useAdmin } from \"@/hooks/useAdmin\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Button } from \"@/components/ui/button\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Input } from \"@/components/ui/input\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Edit2, Save, X, Trash2, Copy } from \"lucide-react\";\nimport { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle } from \"@/components/ui/alert-dialog\";\nimport ContextMenu, { useContextMenu } from \"@/components/ContextMenu\";\nimport { PendingChangesIndicator } from \"@/components/PendingChangesIndicator\";\nimport { useEditSessionForm } from \"@/hooks/useEditSessionForm\";\nimport type { Block } from \"@shared/schema\";\n\ninterface TextBlockProps {\n  block: Block;\n  index: number;\n  isAdmin: boolean;\n}\n\nexport default function TextBlock({ block, index, isAdmin }: TextBlockProps) {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [isEditing, setIsEditing] = useState(false);\n  const [showDeleteDialog, setShowDeleteDialog] = useState(false);\n  const { contextMenu, showContextMenu, hideContextMenu } = useContextMenu();\n\n  // Use edit session form for pending changes tracking\n  const {\n    formData: editContent,\n    updateFormData,\n    revertChanges,\n    hasUnsavedChanges,\n    hasPendingChanges,\n  } = useEditSessionForm(block.id, 'block', block.content as Record<string, any>, 'update');\n\n  const updateBlockMutation = useMutation({\n    mutationFn: async (data: any) => {\n      const response = await apiRequest(\"PUT\", `/api/blocks/${block.id}`, data);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/pages\", block.pageId, \"blocks\"] });\n      setIsEditing(false);\n      toast({\n        title: \"Block updated\",\n        description: \"Your changes have been saved successfully.\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to update block. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteBlockMutation = useMutation({\n    mutationFn: async () => {\n      await apiRequest(\"DELETE\", `/api/blocks/${block.id}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/pages\", block.pageId, \"blocks\"] });\n      toast({\n        title: \"Block deleted\",\n        description: \"The block has been removed successfully.\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to delete block. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSave = () => {\n    updateBlockMutation.mutate({\n      content: editContent,\n    });\n  };\n\n  const handleCancel = () => {\n    revertChanges();\n    setIsEditing(false);\n  };\n\n  const handleDelete = () => {\n    deleteBlockMutation.mutate();\n  };\n\n  const handleCopyBlock = async () => {\n    try {\n      const textContent = block.content && typeof block.content === 'object' && 'text' in block.content\n        ? (block.content as any).text \n        : JSON.stringify(block.content || \"\");\n      await navigator.clipboard.writeText(textContent);\n      toast({\n        title: \"Copied\",\n        description: \"Block content copied to clipboard.\",\n      });\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Failed to copy content.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleBlockContextMenu = (e: React.MouseEvent) => {\n    if (isAdmin) {\n      showContextMenu(e);\n    }\n  };\n\n  const renderContent = () => {\n    const content = isEditing ? editContent : block.content;\n    \n    if (block.type === \"text\" || block.type === \"text_media\") {\n      return isEditing ? (\n        <div className=\"space-y-4\">\n          <div>\n            <label className=\"text-sm font-medium\">Title</label>\n            <Input\n              value={(content as any)?.title || \"\"}\n              onChange={(e) => updateFormData({ ...(content as any), title: e.target.value })}\n              className=\"mt-1\"\n              data-testid=\"input-block-title\"\n            />\n          </div>\n          <div>\n            <label className=\"text-sm font-medium\">Content</label>\n            <Textarea\n              value={(content as any)?.text || \"\"}\n              onChange={(e) => updateFormData({ ...(content as any), text: e.target.value })}\n              rows={6}\n              className=\"mt-1\"\n              data-testid=\"textarea-block-content\"\n            />\n          </div>\n        </div>\n      ) : (\n        <div>\n          {(content as any).title && (\n            <h2 className=\"text-2xl font-bold mb-4 bg-gradient-to-r from-primary to-accent bg-clip-text text-transparent\">\n              {(content as any).title}\n            </h2>\n          )}\n          {(content as any).text && (\n            <p className=\"text-lg text-card-foreground leading-relaxed whitespace-pre-wrap\">\n              {(content as any).text}\n            </p>\n          )}\n        </div>\n      );\n    }\n\n    return null;\n  };\n\n  return (\n    <div \n      className=\"relative group block-hover\" \n      data-testid={`text-block-${block.id}`}\n      onContextMenu={handleBlockContextMenu}\n    >\n      {/* Edit Handle (Admin Only) */}\n      {isAdmin && !isEditing && (\n        <div className=\"absolute -top-2 -left-2 flex items-center gap-2\">\n          <Button\n            size=\"sm\"\n            variant=\"secondary\"\n            className=\"w-8 h-8 edit-handle\"\n            onClick={() => setIsEditing(true)}\n            data-testid=\"button-edit-text-block\"\n          >\n            <Edit2 className=\"w-4 h-4\" />\n          </Button>\n          <PendingChangesIndicator\n            itemId={block.id}\n            itemType=\"block\"\n            showRevertButton={true}\n          />\n        </div>\n      )}\n      \n      <div className=\"bg-card rounded-lg p-8 hover-lift relative overflow-hidden\">\n        {renderContent()}\n        \n        {/* Edit Mode Controls */}\n        {isEditing && (\n          <div className=\"flex justify-end space-x-3 mt-6 pt-6 border-t border-border\">\n            <Button\n              variant=\"outline\"\n              onClick={handleCancel}\n              disabled={updateBlockMutation.isPending}\n              data-testid=\"button-cancel-edit\"\n            >\n              <X className=\"w-4 h-4 mr-2\" />\n              Cancel\n            </Button>\n            <Button\n              variant=\"destructive\"\n              onClick={() => setShowDeleteDialog(true)}\n              disabled={updateBlockMutation.isPending || deleteBlockMutation.isPending}\n              data-testid=\"button-delete-block\"\n            >\n              <Trash2 className=\"w-4 h-4 mr-2\" />\n              Delete\n            </Button>\n            <Button\n              onClick={handleSave}\n              disabled={updateBlockMutation.isPending}\n              data-testid=\"button-save-block\"\n            >\n              <Save className=\"w-4 h-4 mr-2\" />\n              {updateBlockMutation.isPending ? \"Saving...\" : \"Save\"}\n            </Button>\n          </div>\n        )}\n      </div>\n\n      {/* Delete Confirmation Dialog */}\n      <AlertDialog open={showDeleteDialog} onOpenChange={setShowDeleteDialog}>\n        <AlertDialogContent>\n          <AlertDialogHeader>\n            <AlertDialogTitle>Delete Block</AlertDialogTitle>\n            <AlertDialogDescription>\n              Are you sure you want to delete this text block? This action cannot be undone.\n            </AlertDialogDescription>\n          </AlertDialogHeader>\n          <AlertDialogFooter>\n            <AlertDialogCancel data-testid=\"button-cancel-delete\">Cancel</AlertDialogCancel>\n            <AlertDialogAction\n              onClick={handleDelete}\n              className=\"bg-destructive hover:bg-destructive/90\"\n              data-testid=\"button-confirm-delete\"\n            >\n              Delete\n            </AlertDialogAction>\n          </AlertDialogFooter>\n        </AlertDialogContent>\n      </AlertDialog>\n\n      {/* Block Context Menu */}\n      <ContextMenu\n        x={contextMenu.x}\n        y={contextMenu.y}\n        isVisible={contextMenu.isVisible}\n        onClose={hideContextMenu}\n        options={[\n          {\n            icon: <Edit2 className=\"w-4 h-4\" />,\n            label: \"Edit\",\n            onClick: () => setIsEditing(true),\n          },\n          {\n            icon: <Copy className=\"w-4 h-4\" />,\n            label: \"Copy text\",\n            onClick: handleCopyBlock,\n          },\n          {\n            icon: <Trash2 className=\"w-4 h-4\" />,\n            label: \"Delete block\",\n            variant: \"destructive\",\n            onClick: () => setShowDeleteDialog(true),\n          },\n        ]}\n      />\n    </div>\n  );\n}","size_bytes":8929}},"version":1}